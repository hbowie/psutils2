/*
 * Copyright 2012 - 2015 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.psutils2.clubplanner;

	import com.powersurgepub.psutils2.list.*;
	import com.powersurgepub.psutils2.records.*;
	import com.powersurgepub.psutils2.strings.*;
	import com.powersurgepub.psutils2.tags.*;
	import com.powersurgepub.psutils2.values.*;

  import java.io.*;
  import java.math.*;
  import java.util.*;

  import javafx.scene.control.*;
 
/**
 A single event, or other item to be tracked by the club. <p>
 
    This item class definition generated by PSTextMerge using: <p>
 
     template:  item-class.java <p>
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls

 @author Herb Bowie
 */
public class ClubEvent
    implements
      // Generated by PSTextMerge using template taggable-implements.java.
      Taggable,
            Comparable,
            PSItem
			 {

  private static final RecordDefinition recDef;


  /*
   Following code generated by PSTextMerge using:
 
     template:  variable-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
   A string describing the calendar year, or a range of consecutive calendar years, that define the club operating year in which this event takes place.
   */
  private String year = null;
 
  public static final String YEAR_FIELD_NAME = "Year";
 
  public static final String YEAR_COLUMN_NAME = "Year";
 
  public static final String YEAR_COMMON_NAME = "year";
 
  public static final int YEAR_COLUMN_INDEX = 0;
 
  public static final int YEAR_COLUMN_WIDTH = 12;
 

  /**
   The type of item.
   */
  private String itemType = null;
 
  public static final String ITEM_TYPE_FIELD_NAME = "Item Type";
 
  public static final String ITEM_TYPE_COLUMN_NAME = "Type";
 
  public static final String ITEM_TYPE_COMMON_NAME = "itemtype";
 
  public static final int ITEM_TYPE_COLUMN_INDEX = 1;
 
  public static final int ITEM_TYPE_COLUMN_WIDTH = 20;
 

  /**
   The category assigned to the event.
   */
  private String category = null;
 
  public static final String CATEGORY_FIELD_NAME = "Category";
 
  public static final String CATEGORY_COLUMN_NAME = "Category";
 
  public static final String CATEGORY_COMMON_NAME = "category";
 
  public static final int CATEGORY_COLUMN_INDEX = 2;
 
  public static final int CATEGORY_COLUMN_WIDTH = 20;
 

  /**
   The sequence of discussion at a Board meeting.
   */
  private String seq = null;
 
  public static final String SEQ_FIELD_NAME = "Seq";
 
  public static final String SEQ_COLUMN_NAME = "Seq";
 
  public static final String SEQ_COMMON_NAME = "seq";
 
  public static final int SEQ_COLUMN_INDEX = 3;
 
  public static final int SEQ_COLUMN_WIDTH = 4;
 

  /**
   The state, or status, of the event.
   */
  private ItemStatus state = new ItemStatus();
 
  public static final String STATE_FIELD_NAME = "State";
 
  public static final String STATE_COLUMN_NAME = "State";
 
  public static final String STATE_COMMON_NAME = "state";
 
  public static final int STATE_COLUMN_INDEX = 4;
 
  public static final int STATE_COLUMN_WIDTH = 20;
 

  /**
   One or more tags indicating the status of the event.
   */
  private Tags flags = new Tags();
 
  public static final String FLAGS_FIELD_NAME = "Flags";
 
  public static final String FLAGS_COLUMN_NAME = "Flags";
 
  public static final String FLAGS_COMMON_NAME = "flags";
 
  public static final int FLAGS_COLUMN_INDEX = 5;
 
  public static final int FLAGS_COLUMN_WIDTH = 12;
 
  private TreeItem<TagsNodeValue> tagsNode = null;

  /**
   An indication of the date and time that the event will be held, in a format emphasizing human readability. This need not be a complete date. It need not and generally should not contain the year, since this can be inferred from the operating year identified in the higher level folder. If an exact date is known, then this field should generally start with a three-character abbreviation for the day of the week. Three-character abbreviations for the month are also recognized and encouraged. Following are perfectly good examples of dates: Apr; Sat May 5; Thu Sun Mar 25 5:30 - 7:30 PM.
   */
  private String when = null;
 
  public static final String WHEN_FIELD_NAME = "When";
 
  public static final String WHEN_COLUMN_NAME = "When";
 
  public static final String WHEN_COMMON_NAME = "when";
 
  public static final int WHEN_COLUMN_INDEX = 6;
 
  public static final int WHEN_COLUMN_WIDTH = 20;
 

  /**
   A full or partial date in year, month, day sequence.
   */
  private String ymd = null;
 
  public static final String YMD_FIELD_NAME = "YMD";
 
  public static final String YMD_COLUMN_NAME = "YMD";
 
  public static final String YMD_COMMON_NAME = "ymd";
 
  public static final int YMD_COLUMN_INDEX = 7;
 
  public static final int YMD_COLUMN_WIDTH = 10;
 

  /**
   A brief descriptive title for the event.
   */
  private String what = null;
 
  public static final String WHAT_FIELD_NAME = "What";
 
  public static final String WHAT_COLUMN_NAME = "What";
 
  public static final String WHAT_COMMON_NAME = "what";
 
  public static final int WHAT_COLUMN_INDEX = 8;
 
  public static final int WHAT_COLUMN_WIDTH = 35;
 

  /**
   The location of the event, including the name of the venue and its address.
   */
  private ContactInfo where = new ContactInfo();
 
  public static final String WHERE_FIELD_NAME = "Where";
 
  public static final String WHERE_COLUMN_NAME = "Where";
 
  public static final String WHERE_COMMON_NAME = "where";
 
  public static final int WHERE_COLUMN_INDEX = 9;
 
  public static final int WHERE_COLUMN_WIDTH = 30;
 

  /**
   The extracted name from the Where field.
   */
  private String whereName = null;
 
  public static final String WHERE_NAME_FIELD_NAME = "Where Name";
 
  public static final String WHERE_NAME_COLUMN_NAME = "Where Name";
 
  public static final String WHERE_NAME_COMMON_NAME = "wherename";
 
  public static final int WHERE_NAME_COLUMN_INDEX = 10;
 
  public static final int WHERE_NAME_COLUMN_WIDTH = 20;
 

  /**
   The extracted street address from the Where field.
   */
  private String whereAddress = null;
 
  public static final String WHERE_ADDRESS_FIELD_NAME = "Where Address";
 
  public static final String WHERE_ADDRESS_COLUMN_NAME = "Where Address";
 
  public static final String WHERE_ADDRESS_COMMON_NAME = "whereaddress";
 
  public static final int WHERE_ADDRESS_COLUMN_INDEX = 11;
 
  public static final int WHERE_ADDRESS_COLUMN_WIDTH = 20;
 

  /**
   The extracted city from the Where field.
   */
  private String whereCity = null;
 
  public static final String WHERE_CITY_FIELD_NAME = "Where City";
 
  public static final String WHERE_CITY_COLUMN_NAME = "Where City";
 
  public static final String WHERE_CITY_COMMON_NAME = "wherecity";
 
  public static final int WHERE_CITY_COLUMN_INDEX = 12;
 
  public static final int WHERE_CITY_COLUMN_WIDTH = 15;
 

  /**
   The extracted state from the Where field.
   */
  private String whereState = null;
 
  public static final String WHERE_STATE_FIELD_NAME = "Where State";
 
  public static final String WHERE_STATE_COLUMN_NAME = "Where State";
 
  public static final String WHERE_STATE_COMMON_NAME = "wherestate";
 
  public static final int WHERE_STATE_COLUMN_INDEX = 13;
 
  public static final int WHERE_STATE_COLUMN_WIDTH = 2;
 

  /**
   The extracted zip code from the Where field.
   */
  private String whereZip = null;
 
  public static final String WHERE_ZIP_FIELD_NAME = "Where Zip";
 
  public static final String WHERE_ZIP_COLUMN_NAME = "Where Zip";
 
  public static final String WHERE_ZIP_COMMON_NAME = "wherezip";
 
  public static final int WHERE_ZIP_COLUMN_INDEX = 14;
 
  public static final int WHERE_ZIP_COLUMN_WIDTH = 5;
 

  /**
   The extracted phone number from the Where field.
   */
  private String wherePhone = null;
 
  public static final String WHERE_PHONE_FIELD_NAME = "Where Phone";
 
  public static final String WHERE_PHONE_COLUMN_NAME = "Where Phone";
 
  public static final String WHERE_PHONE_COMMON_NAME = "wherephone";
 
  public static final int WHERE_PHONE_COLUMN_INDEX = 15;
 
  public static final int WHERE_PHONE_COLUMN_WIDTH = 13;
 

  /**
   The extracted e-mail address from the Where field.
   */
  private String whereEmail = null;
 
  public static final String WHERE_EMAIL_FIELD_NAME = "Where Email";
 
  public static final String WHERE_EMAIL_COLUMN_NAME = "Where Email";
 
  public static final String WHERE_EMAIL_COMMON_NAME = "whereemail";
 
  public static final int WHERE_EMAIL_COLUMN_INDEX = 16;
 
  public static final int WHERE_EMAIL_COLUMN_WIDTH = 15;
 

  /**
   The generated map URL for the Where field.
   */
  private String whereMapUrl = null;
 
  public static final String WHERE_MAP_URL_FIELD_NAME = "Where MapURL";
 
  public static final String WHERE_MAP_URL_COLUMN_NAME = "Where MapURL";
 
  public static final String WHERE_MAP_URL_COMMON_NAME = "wheremapurl";
 
  public static final int WHERE_MAP_URL_COLUMN_INDEX = 17;
 
  public static final int WHERE_MAP_URL_COLUMN_WIDTH = 30;
 

  /**
   Who is assigned to plan, coordinate and host the event. Can include multiple names. Can include email addresses and phone numbers.
   */
  private ContactInfo who = new ContactInfo();
 
  public static final String WHO_FIELD_NAME = "Who";
 
  public static final String WHO_COLUMN_NAME = "Who";
 
  public static final String WHO_COMMON_NAME = "who";
 
  public static final int WHO_COLUMN_INDEX = 18;
 
  public static final int WHO_COLUMN_WIDTH = 20;
 

  /**
   The extracted name from the Who field.
   */
  private String whoName = null;
 
  public static final String WHO_NAME_FIELD_NAME = "Who Name";
 
  public static final String WHO_NAME_COLUMN_NAME = "Who Name";
 
  public static final String WHO_NAME_COMMON_NAME = "whoname";
 
  public static final int WHO_NAME_COLUMN_INDEX = 19;
 
  public static final int WHO_NAME_COLUMN_WIDTH = 20;
 

  /**
   The extracted street address from the Who field.
   */
  private String whoAddress = null;
 
  public static final String WHO_ADDRESS_FIELD_NAME = "Who Address";
 
  public static final String WHO_ADDRESS_COLUMN_NAME = "Who Address";
 
  public static final String WHO_ADDRESS_COMMON_NAME = "whoaddress";
 
  public static final int WHO_ADDRESS_COLUMN_INDEX = 20;
 
  public static final int WHO_ADDRESS_COLUMN_WIDTH = 20;
 

  /**
   The extracted city from the Who field.
   */
  private String whoCity = null;
 
  public static final String WHO_CITY_FIELD_NAME = "Who City";
 
  public static final String WHO_CITY_COLUMN_NAME = "Who City";
 
  public static final String WHO_CITY_COMMON_NAME = "whocity";
 
  public static final int WHO_CITY_COLUMN_INDEX = 21;
 
  public static final int WHO_CITY_COLUMN_WIDTH = 15;
 

  /**
   The extracted state from the Who field.
   */
  private String whoState = null;
 
  public static final String WHO_STATE_FIELD_NAME = "Who State";
 
  public static final String WHO_STATE_COLUMN_NAME = "Who State";
 
  public static final String WHO_STATE_COMMON_NAME = "whostate";
 
  public static final int WHO_STATE_COLUMN_INDEX = 22;
 
  public static final int WHO_STATE_COLUMN_WIDTH = 2;
 

  /**
   The extracted zip code from the Who field.
   */
  private String whoZip = null;
 
  public static final String WHO_ZIP_FIELD_NAME = "Who Zip";
 
  public static final String WHO_ZIP_COLUMN_NAME = "Who Zip";
 
  public static final String WHO_ZIP_COMMON_NAME = "whozip";
 
  public static final int WHO_ZIP_COLUMN_INDEX = 23;
 
  public static final int WHO_ZIP_COLUMN_WIDTH = 5;
 

  /**
   The extracted phone number from the Who field.
   */
  private String whoPhone = null;
 
  public static final String WHO_PHONE_FIELD_NAME = "Who Phone";
 
  public static final String WHO_PHONE_COLUMN_NAME = "Who Phone";
 
  public static final String WHO_PHONE_COMMON_NAME = "whophone";
 
  public static final int WHO_PHONE_COLUMN_INDEX = 24;
 
  public static final int WHO_PHONE_COLUMN_WIDTH = 13;
 

  /**
   The extracted e-mail address from the Who field.
   */
  private String whoEmail = null;
 
  public static final String WHO_EMAIL_FIELD_NAME = "Who Email";
 
  public static final String WHO_EMAIL_COLUMN_NAME = "Who Email";
 
  public static final String WHO_EMAIL_COMMON_NAME = "whoemail";
 
  public static final int WHO_EMAIL_COLUMN_INDEX = 25;
 
  public static final int WHO_EMAIL_COLUMN_WIDTH = 15;
 

  /**
   The generated map URL for the Who field.
   */
  private String whoMapUrl = null;
 
  public static final String WHO_MAP_URL_FIELD_NAME = "Who MapURL";
 
  public static final String WHO_MAP_URL_COLUMN_NAME = "Who MapURL";
 
  public static final String WHO_MAP_URL_COMMON_NAME = "whomapurl";
 
  public static final int WHO_MAP_URL_COLUMN_INDEX = 26;
 
  public static final int WHO_MAP_URL_COLUMN_WIDTH = 30;
 

  /**
   Identification of any issues to be discussed at an upcoming board meeting.
   */
  private String discuss = null;
 
  public static final String DISCUSS_FIELD_NAME = "Discuss";
 
  public static final String DISCUSS_COLUMN_NAME = "Discuss";
 
  public static final String DISCUSS_COMMON_NAME = "discuss";
 
  public static final int DISCUSS_COLUMN_INDEX = 27;
 
  public static final int DISCUSS_COLUMN_WIDTH = 40;
 

  /**
   The Discussion points, formatted as HTML.
   */
  private String discussAsHtml = null;
 
  public static final String DISCUSS_AS_HTML_FIELD_NAME = "Discuss as HTML";
 
  public static final String DISCUSS_AS_HTML_COLUMN_NAME = "Discuss as HTML";
 
  public static final String DISCUSS_AS_HTML_COMMON_NAME = "discussashtml";
 
  public static final int DISCUSS_AS_HTML_COLUMN_INDEX = 28;
 
  public static final int DISCUSS_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   Identification of any action items to be worked.
   */
  private String actions = null;
 
  public static final String ACTIONS_FIELD_NAME = "Actions";
 
  public static final String ACTIONS_COLUMN_NAME = "Actions";
 
  public static final String ACTIONS_COMMON_NAME = "actions";
 
  public static final int ACTIONS_COLUMN_INDEX = 29;
 
  public static final int ACTIONS_COLUMN_WIDTH = 40;
 

  /**
   The action items, formatted as HTML.
   */
  private String actionsAsHtml = null;
 
  public static final String ACTIONS_AS_HTML_FIELD_NAME = "Actions as HTML";
 
  public static final String ACTIONS_AS_HTML_COLUMN_NAME = "Actions as HTML";
 
  public static final String ACTIONS_AS_HTML_COMMON_NAME = "actionsashtml";
 
  public static final int ACTIONS_AS_HTML_COLUMN_INDEX = 30;
 
  public static final int ACTIONS_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   Why does the club think it would be a good idea to host the event? If applying for Strategic Priority Funds, then why do we think this is a deserving event?
   */
  private String why = null;
 
  public static final String WHY_FIELD_NAME = "Why";
 
  public static final String WHY_COLUMN_NAME = "Why";
 
  public static final String WHY_COMMON_NAME = "why";
 
  public static final int WHY_COLUMN_INDEX = 31;
 
  public static final int WHY_COLUMN_WIDTH = 40;
 

  /**
   One to three sentences describing the event. Not intended to provide complete information, but intended to pique the reader's interest and motivate him to read further.
   */
  private String teaser = null;
 
  public static final String TEASER_FIELD_NAME = "Teaser";
 
  public static final String TEASER_COLUMN_NAME = "Teaser";
 
  public static final String TEASER_COMMON_NAME = "teaser";
 
  public static final int TEASER_COLUMN_INDEX = 32;
 
  public static final int TEASER_COLUMN_WIDTH = 40;
 

  /**
   Additional information about the event. Need not repeat information in the teaser, and need not repeat additional event details available from other fields, such as When and Where. This field can contain multiple paragraphs, separated by blank lines.
   */
  private String blurb = null;
 
  public static final String BLURB_FIELD_NAME = "Blurb";
 
  public static final String BLURB_COLUMN_NAME = "Blurb";
 
  public static final String BLURB_COMMON_NAME = "blurb";
 
  public static final int BLURB_COLUMN_INDEX = 33;
 
  public static final int BLURB_COLUMN_WIDTH = 40;
 

  /**
   The teaser, formatted as HTML.
   */
  private String teaserAsHtml = null;
 
  public static final String TEASER_AS_HTML_FIELD_NAME = "Teaser as HTML";
 
  public static final String TEASER_AS_HTML_COLUMN_NAME = "Teaser as HTML";
 
  public static final String TEASER_AS_HTML_COMMON_NAME = "teaserashtml";
 
  public static final int TEASER_AS_HTML_COLUMN_INDEX = 34;
 
  public static final int TEASER_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   The blurb, formatted as HTML.
   */
  private String blurbAsHtml = null;
 
  public static final String BLURB_AS_HTML_FIELD_NAME = "Blurb as HTML";
 
  public static final String BLURB_AS_HTML_COLUMN_NAME = "Blurb as HTML";
 
  public static final String BLURB_AS_HTML_COMMON_NAME = "blurbashtml";
 
  public static final int BLURB_AS_HTML_COLUMN_INDEX = 35;
 
  public static final int BLURB_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   The cost per person to attend the event. If the event is free, then leave this field blank.
   */
  private String cost = null;
 
  public static final String COST_FIELD_NAME = "Cost";
 
  public static final String COST_COLUMN_NAME = "Cost";
 
  public static final String COST_COMMON_NAME = "cost";
 
  public static final int COST_COLUMN_INDEX = 36;
 
  public static final int COST_COLUMN_WIDTH = 15;
 

  /**
   Instructions on how to purchase tickets to the event, if any.
   */
  private String purchase = null;
 
  public static final String PURCHASE_FIELD_NAME = "Purchase";
 
  public static final String PURCHASE_COLUMN_NAME = "Purchase";
 
  public static final String PURCHASE_COMMON_NAME = "purchase";
 
  public static final int PURCHASE_COLUMN_INDEX = 37;
 
  public static final int PURCHASE_COLUMN_WIDTH = 40;
 

  /**
   For purchasers, information on how they are to receive the tickets.
   */
  private String tickets = null;
 
  public static final String TICKETS_FIELD_NAME = "Tickets";
 
  public static final String TICKETS_COLUMN_NAME = "Tickets";
 
  public static final String TICKETS_COMMON_NAME = "tickets";
 
  public static final int TICKETS_COLUMN_INDEX = 38;
 
  public static final int TICKETS_COLUMN_WIDTH = 30;
 

  /**
   Number of seats or tickets available for the event; maximum number of attendees.
   */
  private String quantity = null;
 
  public static final String QUANTITY_FIELD_NAME = "Quantity";
 
  public static final String QUANTITY_COLUMN_NAME = "Qty";
 
  public static final String QUANTITY_COMMON_NAME = "quantity";
 
  public static final int QUANTITY_COLUMN_INDEX = 39;
 
  public static final int QUANTITY_COLUMN_WIDTH = 8;
 

  /**
   The amount of money we have planned to receive for the event. For this and the following dollar amount fields, multiple dollar figures may be interspersed with descriptive words. $20 x 40 will result in a planned income of $800.00, for example.
   */
  private String plannedIncome = null;
 
  public static final String PLANNED_INCOME_FIELD_NAME = "Planned Income";
 
  public static final String PLANNED_INCOME_COLUMN_NAME = "Pln Inc";
 
  public static final String PLANNED_INCOME_COMMON_NAME = "plannedincome";
 
  public static final int PLANNED_INCOME_COLUMN_INDEX = 40;
 
  public static final int PLANNED_INCOME_COLUMN_WIDTH = 40;
 

  /**
   Our actual income for the event.
   */
  private String actualIncome = null;
 
  public static final String ACTUAL_INCOME_FIELD_NAME = "Actual Income";
 
  public static final String ACTUAL_INCOME_COLUMN_NAME = "Act Inc";
 
  public static final String ACTUAL_INCOME_COMMON_NAME = "actualincome";
 
  public static final int ACTUAL_INCOME_COLUMN_INDEX = 41;
 
  public static final int ACTUAL_INCOME_COLUMN_WIDTH = 40;
 

  /**
   The amount of money we have planned/budgeted to be spent on the event.
   */
  private String plannedExpense = null;
 
  public static final String PLANNED_EXPENSE_FIELD_NAME = "Planned Expense";
 
  public static final String PLANNED_EXPENSE_COLUMN_NAME = "Pln Exp";
 
  public static final String PLANNED_EXPENSE_COMMON_NAME = "plannedexpense";
 
  public static final int PLANNED_EXPENSE_COLUMN_INDEX = 42;
 
  public static final int PLANNED_EXPENSE_COLUMN_WIDTH = 40;
 

  /**
   Our actual expenses for the event.
   */
  private String actualExpense = null;
 
  public static final String ACTUAL_EXPENSE_FIELD_NAME = "Actual Expense";
 
  public static final String ACTUAL_EXPENSE_COLUMN_NAME = "Act Exp";
 
  public static final String ACTUAL_EXPENSE_COMMON_NAME = "actualexpense";
 
  public static final int ACTUAL_EXPENSE_COLUMN_INDEX = 43;
 
  public static final int ACTUAL_EXPENSE_COLUMN_WIDTH = 40;
 

  /**
   The number of attendees built into our planning assumptions.
   */
  private String plannedAttendance = null;
 
  public static final String PLANNED_ATTENDANCE_FIELD_NAME = "Planned Attendance";
 
  public static final String PLANNED_ATTENDANCE_COLUMN_NAME = "Pln Attend";
 
  public static final String PLANNED_ATTENDANCE_COMMON_NAME = "plannedattendance";
 
  public static final int PLANNED_ATTENDANCE_COLUMN_INDEX = 44;
 
  public static final int PLANNED_ATTENDANCE_COLUMN_WIDTH = 8;
 

  /**
   The actual number of people who attended the event.
   */
  private String actualAttendance = null;
 
  public static final String ACTUAL_ATTENDANCE_FIELD_NAME = "Actual Attendance";
 
  public static final String ACTUAL_ATTENDANCE_COLUMN_NAME = "Act Attend";
 
  public static final String ACTUAL_ATTENDANCE_COMMON_NAME = "actualattendance";
 
  public static final int ACTUAL_ATTENDANCE_COLUMN_INDEX = 45;
 
  public static final int ACTUAL_ATTENDANCE_COLUMN_WIDTH = 8;
 

  /**
   The difference between our actuals and our planned income or expense.
   */
  private String overUnder = null;
 
  public static final String OVER_UNDER_FIELD_NAME = "Over/Under";
 
  public static final String OVER_UNDER_COLUMN_NAME = "Ovr/Und";
 
  public static final String OVER_UNDER_COMMON_NAME = "overunder";
 
  public static final int OVER_UNDER_COLUMN_INDEX = 46;
 
  public static final int OVER_UNDER_COLUMN_WIDTH = 8;
 

  /**
   The projected impacted on our club finances, based on actuals, if available, or planned income/expense, if actuals are not yet available.
   */
  private String financeProjection = null;
 
  public static final String FINANCE_PROJECTION_FIELD_NAME = "Finance Projection";
 
  public static final String FINANCE_PROJECTION_COLUMN_NAME = "Fin Proj";
 
  public static final String FINANCE_PROJECTION_COMMON_NAME = "financeprojection";
 
  public static final int FINANCE_PROJECTION_COLUMN_INDEX = 47;
 
  public static final int FINANCE_PROJECTION_COLUMN_WIDTH = 8;
 

  /**
   Prior Year Planned Income, for reference.
   */
  private String priorYrPlnInc = null;
 
  public static final String PRIOR_YR_PLN_INC_FIELD_NAME = "Prior Yr Pln Inc";
 
  public static final String PRIOR_YR_PLN_INC_COLUMN_NAME = "Prior Yr Pln Inc";
 
  public static final String PRIOR_YR_PLN_INC_COMMON_NAME = "prioryrplninc";
 
  public static final int PRIOR_YR_PLN_INC_COLUMN_INDEX = 48;
 
  public static final int PRIOR_YR_PLN_INC_COLUMN_WIDTH = 40;
 

  /**
   Prior Year Actual Income, for reference.
   */
  private String priorYrActInc = null;
 
  public static final String PRIOR_YR_ACT_INC_FIELD_NAME = "Prior Yr Act Inc";
 
  public static final String PRIOR_YR_ACT_INC_COLUMN_NAME = "Prior Yr Act Inc";
 
  public static final String PRIOR_YR_ACT_INC_COMMON_NAME = "prioryractinc";
 
  public static final int PRIOR_YR_ACT_INC_COLUMN_INDEX = 49;
 
  public static final int PRIOR_YR_ACT_INC_COLUMN_WIDTH = 40;
 

  /**
   Prior Year Planned Expense, for reference.
   */
  private String priorYrPlnExp = null;
 
  public static final String PRIOR_YR_PLN_EXP_FIELD_NAME = "Prior Yr Pln Exp";
 
  public static final String PRIOR_YR_PLN_EXP_COLUMN_NAME = "Prior Yr Pln Exp";
 
  public static final String PRIOR_YR_PLN_EXP_COMMON_NAME = "prioryrplnexp";
 
  public static final int PRIOR_YR_PLN_EXP_COLUMN_INDEX = 50;
 
  public static final int PRIOR_YR_PLN_EXP_COLUMN_WIDTH = 40;
 

  /**
   Prior Year Actual Expense, for reference.
   */
  private String priorYrActExp = null;
 
  public static final String PRIOR_YR_ACT_EXP_FIELD_NAME = "Prior Yr Act Exp";
 
  public static final String PRIOR_YR_ACT_EXP_COLUMN_NAME = "Prior Yr Act Exp";
 
  public static final String PRIOR_YR_ACT_EXP_COMMON_NAME = "prioryractexp";
 
  public static final int PRIOR_YR_ACT_EXP_COLUMN_INDEX = 51;
 
  public static final int PRIOR_YR_ACT_EXP_COLUMN_WIDTH = 40;
 

  /**
   A brief summary of how the event went. Can include lessons learned from the event.
   */
  private String recap = null;
 
  public static final String RECAP_FIELD_NAME = "Recap";
 
  public static final String RECAP_COLUMN_NAME = "Recap";
 
  public static final String RECAP_COMMON_NAME = "recap";
 
  public static final int RECAP_COLUMN_INDEX = 52;
 
  public static final int RECAP_COLUMN_WIDTH = 40;
 

  /**
   The event recap, formatted as HTML.
   */
  private String recapAsHtml = null;
 
  public static final String RECAP_AS_HTML_FIELD_NAME = "Recap as HTML";
 
  public static final String RECAP_AS_HTML_COLUMN_NAME = "Recap as HTML";
 
  public static final String RECAP_AS_HTML_COMMON_NAME = "recapashtml";
 
  public static final int RECAP_AS_HTML_COLUMN_INDEX = 53;
 
  public static final int RECAP_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   After the event has been added to the club web site, the ID assigned to the page by the Content Management System should be entered here. This will be identified in the URL for the event as the articleid, as in articleid=17, meaning that an ID of 17 should be entered here.
   */
  private String id = null;
 
  public static final String ID_FIELD_NAME = "ID";
 
  public static final String ID_COLUMN_NAME = "ID";
 
  public static final String ID_COMMON_NAME = "id";
 
  public static final int ID_COLUMN_INDEX = 54;
 
  public static final int ID_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to a Web page with more information about the event.
   */
  private String link = null;
 
  public static final String LINK_FIELD_NAME = "Link";
 
  public static final String LINK_COLUMN_NAME = "Link";
 
  public static final String LINK_COMMON_NAME = "link";
 
  public static final int LINK_COLUMN_INDEX = 55;
 
  public static final int LINK_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to a Web page with more information about the venue for the event.
   */
  private String venue = null;
 
  public static final String VENUE_FIELD_NAME = "Venue";
 
  public static final String VENUE_COLUMN_NAME = "Venue";
 
  public static final String VENUE_COMMON_NAME = "venue";
 
  public static final int VENUE_COLUMN_INDEX = 56;
 
  public static final int VENUE_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to an image that can be used to help advertise the event.
   */
  private String image = null;
 
  public static final String IMAGE_FIELD_NAME = "Image";
 
  public static final String IMAGE_COLUMN_NAME = "Image";
 
  public static final String IMAGE_COMMON_NAME = "image";
 
  public static final int IMAGE_COLUMN_INDEX = 57;
 
  public static final int IMAGE_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to an image suitable for use in our newsletter.
   */
  private String newsImage = null;
 
  public static final String NEWS_IMAGE_FIELD_NAME = "News Image";
 
  public static final String NEWS_IMAGE_COLUMN_NAME = "News Image";
 
  public static final String NEWS_IMAGE_COMMON_NAME = "newsimage";
 
  public static final int NEWS_IMAGE_COLUMN_INDEX = 58;
 
  public static final int NEWS_IMAGE_COLUMN_WIDTH = 30;
 

  /**
   Brief request to the reader to take some sort of action
   */
  private String callToAction = null;
 
  public static final String CALL_TO_ACTION_FIELD_NAME = "Call to Action";
 
  public static final String CALL_TO_ACTION_COLUMN_NAME = "Call to Action";
 
  public static final String CALL_TO_ACTION_COMMON_NAME = "calltoaction";
 
  public static final int CALL_TO_ACTION_COLUMN_INDEX = 59;
 
  public static final int CALL_TO_ACTION_COLUMN_WIDTH = 40;
 

  /**
   The actionable link
   */
  private String ctaLink = null;
 
  public static final String CTA_LINK_FIELD_NAME = "CTA Link";
 
  public static final String CTA_LINK_COLUMN_NAME = "CTA Link";
 
  public static final String CTA_LINK_COMMON_NAME = "ctalink";
 
  public static final int CTA_LINK_COLUMN_INDEX = 60;
 
  public static final int CTA_LINK_COLUMN_WIDTH = 30;
 

  /**
   The type of layout to use for this item in our newsletter
   */
  private String layout = null;
 
  public static final String LAYOUT_FIELD_NAME = "Layout";
 
  public static final String LAYOUT_COLUMN_NAME = "Layout";
 
  public static final String LAYOUT_COMMON_NAME = "layout";
 
  public static final int LAYOUT_COLUMN_INDEX = 61;
 
  public static final int LAYOUT_COLUMN_WIDTH = 20;
 

  /**
   Brief, human-readable date.
   */
  private String shortDate = null;
 
  public static final String SHORT_DATE_FIELD_NAME = "Short Date";
 
  public static final String SHORT_DATE_COLUMN_NAME = "Short Date";
 
  public static final String SHORT_DATE_COMMON_NAME = "shortdate";
 
  public static final int SHORT_DATE_COLUMN_INDEX = 62;
 
  public static final int SHORT_DATE_COLUMN_WIDTH = 12;
 

  /**
   One or more blocks of text with information about the event. This field can contain multiple paragraphs, separated by blank lines. Each block of text should be preceded by a line similar to the following example: -- AAUM on Feb 21 via email. Note that each such header line contains the following elements: Two hyphens and a space; identification of the source of the note; the date on which the information was communicated; the means by which the information was communicated.
   */
  private String notes = null;
 
  public static final String NOTES_FIELD_NAME = "Notes";
 
  public static final String NOTES_COLUMN_NAME = "Notes";
 
  public static final String NOTES_COMMON_NAME = "notes";
 
  public static final int NOTES_COLUMN_INDEX = 63;
 
  public static final int NOTES_COLUMN_WIDTH = 40;
 

  /**
   The Notes block, reformatted as HTML.
   */
  private String notesAsHtml = null;
 
  public static final String NOTES_AS_HTML_FIELD_NAME = "Notes as HTML";
 
  public static final String NOTES_AS_HTML_COLUMN_NAME = "Notes as HTML";
 
  public static final String NOTES_AS_HTML_COMMON_NAME = "notesashtml";
 
  public static final int NOTES_AS_HTML_COLUMN_INDEX = 64;
 
  public static final int NOTES_AS_HTML_COLUMN_WIDTH = 50;
 

  public static final int COLUMN_COUNT = 65;


  /*
   Following code generated by PSTextMerge using:
 
     template:  master-detail-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /** Master-detail list for EventActions. */
  private ArrayList<EventAction> eventActionList = new ArrayList();

  /** Master-detail list for EventNotes. */
  private ArrayList<EventNote> eventNoteList = new ArrayList();

  /** Master-detail list for EventTransactions. */
  private ArrayList<EventTransaction> eventTransactionList = new ArrayList();

  private boolean modified = false;
 
  private String  diskLocation = "";
 
  private Comparator comparator = new ClubEventDefaultComparator();

  /**
   Static initializer.
   */
  static {
    DataDictionary dict = new DataDictionary();
    recDef = new RecordDefinition (dict);
    for (int i = 0; i < COLUMN_COUNT; i++) {
      recDef.addColumn (getColumnName(i));
    }
  }

  /**
   A constructor without any arguments.
   */
  public ClubEvent() {

  }
 
  /**
   Get the comparator to be used;
   */
  public Comparator getComparator() {
    return comparator;
  }
 
  /**
   Set the comparator to be used.
   */
  public void setComparator (Comparator comparator) {
    this.comparator = comparator;
  }
 
  /**
   Determine if this item has a key that is equal to the passed
   item.

   @param  obj2        The second object to be compared to this one.
   @param  comparator  The comparator to be used to make the comparison.
   @return True if the keys are equal.
   */
  public boolean equals (Object obj2, Comparator comparator) {
    return (this.compareTo (obj2, comparator) == 0);
  }
 
  /**
   Determine if this item has a key that is equal to the passed
   item.

   @param  obj2  The second object to be compared to this one.
   @return True if the keys are equal.
   */
  public boolean equals (Object obj2) {
    return (this.compareTo (obj2) == 0);
  }
 
  /**
   Compare this ClubEvent object to another, using the key field(s) for comparison.
 
   @param The second object to compare to this one.
 
   @return A number less than zero if this object is less than the second,
           a number greater than zero if this object is greater than the second,
           or zero if the two item's keys are equal.
   */
  public int compareTo (Object obj2, Comparator comparator) {
    if (comparator == null) {
      return -1;
    }
    return comparator.compare (this, obj2);
  }
 
  /**
   Compare this ClubEvent object to another, using the key field(s) for comparison.
 
   @param The second object to compare to this one.
 
   @return A number less than zero if this object is less than the second,
           a number greater than zero if this object is greater than the second,
           or zero if the two item's keys are equal.
   */
  public int compareTo (Object obj2) {
    if (comparator == null) {
      return -1;
    }
    return comparator.compare (this, obj2);
  }
 
  public void resetModified() {
    setModified (false);
  }
 
  public void setModified (boolean modified) {
    this.modified = modified;
  }
 
  public boolean isModified() {
    return modified;
  }
 
  /**
   Set the disk location at which this item is stored.
 
   @param diskLocation The path to the disk location at which this item
                       is stored.
  */
  public void setDiskLocation (String diskLocation) {
    this.diskLocation = diskLocation;
  }
 
  /**
   Set the disk location at which this item is stored.
 
   @param diskLocationFile The disk location at which this item is stored.
  */
  public void setDiskLocation (File diskLocationFile) {
    try {
      this.diskLocation = diskLocationFile.getCanonicalPath();
    } catch (java.io.IOException e) {
      this.diskLocation = diskLocationFile.getAbsolutePath();
    }
  }
 
  /**
   Indicate whether the item has a disk location.
 
   @return True if we've got a disk location, false otherwise.
  */
  public boolean hasDiskLocation() {
    return (diskLocation != null
        && diskLocation.length() > 0);
  }
 
  /**
   Return the disk location at which this item is stored.
 
   @return The disk location at which this item is stored.
  */
  public String getDiskLocation () {
    return diskLocation;
  }
 
  /**
   Find a common name (no punctuation, all lower-case) that starts with
   the passed string, if one exists.
 
   @param possibleFieldName The potential field name we're looking for. This
                            will be converted to a common name before it's
                            compared to the common forms of the field names.
 
   @return The index pointing to the first matching common name that was found,
           or -1 if no match was found.
  */
  public static int commonNameStartsWith (String possibleFieldName) {
    int i = 0;
    boolean fieldMatch = false;
    String possibleCommonName = StringUtils.commonName (possibleFieldName);
    while (i < COLUMN_COUNT && (! fieldMatch)) {
      if (getCommonName(i).startsWith(possibleCommonName)) {
        fieldMatch = true;
      } else {
        i++;
      }
    } // end while looking for field name match
    if (fieldMatch) {
      return i;
    } else {
      return -1;
    }
  }

  /**
   Return a record definition for the ClubEvent.
 
   @return A record definition using a new dictionary.
  */
  public static RecordDefinition getRecDef() {
    return recDef;
  }
 
  /**
   Return a standard data rec using the variables belonging to this object.
 
   @return A generic data record.
  */
  public DataRecord getDataRec() {
    DataRecord dataRec = new DataRecord();
    for (int i = 0; i < COLUMN_COUNT; i++) {
      Object columnValue = getColumnValue(i);
      String columnValueStr = "";
      if (columnValue != null) {
        columnValueStr = columnValue.toString();
      }
      DataField nextField = new DataField(recDef, i, columnValueStr);
      nextField.setDataRaw(columnValueStr);
      int dataRecFieldNumber = dataRec.addField(nextField);
      // int dataRecFieldNumber = dataRec.addField(recDef, columnValueStr);
    }
    return dataRec;
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  duplicate.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Duplicates this item, making a deep copy.
   */
  public ClubEvent duplicate () {
    ClubEvent newClubEvent = new ClubEvent();
		String yearStr = new String(getYearAsString());
		newClubEvent.setYear(yearStr);
		String itemTypeStr = new String(getItemTypeAsString());
		newClubEvent.setItemType(itemTypeStr);
		String categoryStr = new String(getCategoryAsString());
		newClubEvent.setCategory(categoryStr);
		String stateStr = new String(getStateAsString());
		newClubEvent.setState(stateStr);
		String flagsStr = new String(getFlagsAsString());
		newClubEvent.setFlags(flagsStr);
		String whenStr = new String(getWhenAsString());
		newClubEvent.setWhen(whenStr);
		String whatStr = new String(getWhatAsString());
		newClubEvent.setWhat(whatStr);
		String whereStr = new String(getWhereAsString());
		newClubEvent.setWhere(whereStr);
		String whoStr = new String(getWhoAsString());
		newClubEvent.setWho(whoStr);
		String discussStr = new String(getDiscussAsString());
		newClubEvent.setDiscuss(discussStr);
		String actionsStr = new String(getActionsAsString());
		newClubEvent.setActions(actionsStr);
		String whyStr = new String(getWhyAsString());
		newClubEvent.setWhy(whyStr);
		String teaserStr = new String(getTeaserAsString());
		newClubEvent.setTeaser(teaserStr);
		String blurbStr = new String(getBlurbAsString());
		newClubEvent.setBlurb(blurbStr);
		String costStr = new String(getCostAsString());
		newClubEvent.setCost(costStr);
		String purchaseStr = new String(getPurchaseAsString());
		newClubEvent.setPurchase(purchaseStr);
		String ticketsStr = new String(getTicketsAsString());
		newClubEvent.setTickets(ticketsStr);
		String quantityStr = new String(getQuantityAsString());
		newClubEvent.setQuantity(quantityStr);
		String plannedIncomeStr = new String(getPlannedIncomeAsString());
		newClubEvent.setPlannedIncome(plannedIncomeStr);
		String actualIncomeStr = new String(getActualIncomeAsString());
		newClubEvent.setActualIncome(actualIncomeStr);
		String plannedExpenseStr = new String(getPlannedExpenseAsString());
		newClubEvent.setPlannedExpense(plannedExpenseStr);
		String actualExpenseStr = new String(getActualExpenseAsString());
		newClubEvent.setActualExpense(actualExpenseStr);
		String plannedAttendanceStr = new String(getPlannedAttendanceAsString());
		newClubEvent.setPlannedAttendance(plannedAttendanceStr);
		String actualAttendanceStr = new String(getActualAttendanceAsString());
		newClubEvent.setActualAttendance(actualAttendanceStr);
		String priorYrPlnIncStr = new String(getPriorYrPlnIncAsString());
		newClubEvent.setPriorYrPlnInc(priorYrPlnIncStr);
		String priorYrActIncStr = new String(getPriorYrActIncAsString());
		newClubEvent.setPriorYrActInc(priorYrActIncStr);
		String priorYrPlnExpStr = new String(getPriorYrPlnExpAsString());
		newClubEvent.setPriorYrPlnExp(priorYrPlnExpStr);
		String priorYrActExpStr = new String(getPriorYrActExpAsString());
		newClubEvent.setPriorYrActExp(priorYrActExpStr);
		String recapStr = new String(getRecapAsString());
		newClubEvent.setRecap(recapStr);
		String idStr = new String(getIdAsString());
		newClubEvent.setId(idStr);
		String linkStr = new String(getLinkAsString());
		newClubEvent.setLink(linkStr);
		String venueStr = new String(getVenueAsString());
		newClubEvent.setVenue(venueStr);
		String imageStr = new String(getImageAsString());
		newClubEvent.setImage(imageStr);
		String newsImageStr = new String(getNewsImageAsString());
		newClubEvent.setNewsImage(newsImageStr);
		String callToActionStr = new String(getCallToActionAsString());
		newClubEvent.setCallToAction(callToActionStr);
		String ctaLinkStr = new String(getCtaLinkAsString());
		newClubEvent.setCtaLink(ctaLinkStr);
		String layoutStr = new String(getLayoutAsString());
		newClubEvent.setLayout(layoutStr);
		String notesStr = new String(getNotesAsString());
		newClubEvent.setNotes(notesStr);
		return newClubEvent;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  master-io-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
   Determine if this item has a local path.

   @return True if this item has a local path.
   */
  public boolean hasLocalPath () {

    return (hasFolderName() && hasFileName());
  }

  /**
   Return the local path identifying the disk location of this item.
 
   @return the folder name plus the file name, without any file extension.
   */
   public String getLocalPath() {
     return getFolderName() + getFileName();
   }
  /**
   Does the item have a valid folder name?
 
   @return True if the folder name field for this item is neither null nor blank.
   */
  public boolean hasFolderName() {
		if (getCategory() == null) {
			return false;
		}
		else
		if (getCategory().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the name of the folder in which this item should be stored.
	
	 @return The folder name to be used, followed by a slash, or an empty
	         string, if the folder name field is blank or null.
	 */
	public String getFolderName() {
		if (getCategory() == null) {
			return "";
		}
		else
		if (getCategory().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (getCategory().toString()) + "/";
		}
	}
  /**
   Does the item have a valid file name?
 
   @return True if the file name field for this item is neither null nor blank.
   */
  public boolean hasFileName() {
		if (getWhat() == null) {
			return false;
		}
		else
		if (getWhat().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the file name in which this item should be stored.
	
	 @return The file name to be used, without a file extension.
	 */
	public String getFileName() {
		if (getWhat() == null) {
			return "";
		}
		else
		if (getWhat().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (getWhat().toString());
		}
	}

  /*
   Following code generated by PSTextMerge using:
 
     template:  haskey-method.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
   Determine if this item has a key.

   @return True if this item has a key.
   */
  public boolean hasKey () {

    boolean hasKey = false;

		if (getWhat() == null) {
			// No key here
		}
		else
		if (getWhat().toString() == "") {
			// No key here
		} else {
			hasKey = true;
		}

    return hasKey;
  }
 
  /**
    Check for a search string within the given Club Event item.
 
    This method generated by PSTextMerge using template find.java.
 
    @param findLower   The search string in all lower case.
    @param findUpper   The search string in all upper case.
 
    @return True if this item contains the search string
            in one of its searchable fields.

   */
  public boolean find (String findLower, String findUpper) {

    boolean found = false;
    int fieldStart = -1;

    if (getCategory() != null
        && getCategory().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getCategoryAsString(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    if (getWhat() != null
        && getWhat().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWhatAsString(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    if (getWhere() != null
        && getWhere().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWhereAsString(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    if (getWho() != null
        && getWho().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWhoAsString(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    return found;
  }

  /**
    Return a string value representing the given item.
 
    This method generated by PSTextMerge using template toString.java.
 
    @return The string by which this item shall be known.

   */
  public String toString() {

    StringBuilder str = new StringBuilder();
    str.append(getWhat().toString());

    return str.toString();
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  merge.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Merges the contents of a second item into this one.
   */
  public void merge (ClubEvent clubEvent2) {
    Object obj2;
    String str2;
    obj2 = clubEvent2.getYear();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setYear ((String)obj2);
      }
    }
    obj2 = clubEvent2.getItemType();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setItemType ((String)obj2);
      }
    }
    obj2 = clubEvent2.getCategory();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setCategory ((String)obj2);
      }
    }
    obj2 = clubEvent2.getSeq();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setSeq ((String)obj2);
      }
    }
    obj2 = clubEvent2.getState();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setState ((ItemStatus)obj2);
      }
    }
    obj2 = clubEvent2.getFlags();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setFlags ((Tags)obj2);
      }
    }
    obj2 = clubEvent2.getWhen();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhen ((String)obj2);
      }
    }
    obj2 = clubEvent2.getYmd();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setYmd ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhat();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhat ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhere();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhere ((ContactInfo)obj2);
      }
    }
    obj2 = clubEvent2.getWhereName();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereName ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereAddress();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereAddress ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereCity();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereCity ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereState();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereState ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereZip();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereZip ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWherePhone();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWherePhone ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereEmail();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereEmail ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhereMapUrl();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhereMapUrl ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWho();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWho ((ContactInfo)obj2);
      }
    }
    obj2 = clubEvent2.getWhoName();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoName ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoAddress();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoAddress ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoCity();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoCity ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoState();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoState ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoZip();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoZip ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoPhone();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoPhone ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoEmail();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoEmail ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhoMapUrl();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhoMapUrl ((String)obj2);
      }
    }
    obj2 = clubEvent2.getDiscuss();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setDiscuss ((String)obj2);
      }
    }
    obj2 = clubEvent2.getDiscussAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setDiscussAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActions();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActions ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActionsAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActionsAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhy();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhy ((String)obj2);
      }
    }
    obj2 = clubEvent2.getTeaser();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setTeaser ((String)obj2);
      }
    }
    obj2 = clubEvent2.getBlurb();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setBlurb ((String)obj2);
      }
    }
    obj2 = clubEvent2.getTeaserAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setTeaserAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getBlurbAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setBlurbAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getCost();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setCost ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPurchase();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPurchase ((String)obj2);
      }
    }
    obj2 = clubEvent2.getTickets();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setTickets ((String)obj2);
      }
    }
    obj2 = clubEvent2.getQuantity();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setQuantity ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedIncome();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedIncome ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualIncome();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualIncome ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedExpense();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedExpense ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualExpense();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualExpense ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedAttendance();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedAttendance ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualAttendance();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualAttendance ((String)obj2);
      }
    }
    obj2 = clubEvent2.getOverUnder();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setOverUnder ((String)obj2);
      }
    }
    obj2 = clubEvent2.getFinanceProjection();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setFinanceProjection ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPriorYrPlnInc();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPriorYrPlnInc ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPriorYrActInc();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPriorYrActInc ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPriorYrPlnExp();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPriorYrPlnExp ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPriorYrActExp();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPriorYrActExp ((String)obj2);
      }
    }
    obj2 = clubEvent2.getRecap();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setRecap ((String)obj2);
      }
    }
    obj2 = clubEvent2.getRecapAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setRecapAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getId();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setId ((String)obj2);
      }
    }
    obj2 = clubEvent2.getLink();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setLink ((String)obj2);
      }
    }
    obj2 = clubEvent2.getVenue();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setVenue ((String)obj2);
      }
    }
    obj2 = clubEvent2.getImage();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setImage ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNewsImage();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNewsImage ((String)obj2);
      }
    }
    obj2 = clubEvent2.getCallToAction();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setCallToAction ((String)obj2);
      }
    }
    obj2 = clubEvent2.getCtaLink();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setCtaLink ((String)obj2);
      }
    }
    obj2 = clubEvent2.getLayout();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setLayout ((String)obj2);
      }
    }
    obj2 = clubEvent2.getShortDate();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setShortDate ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNotes();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNotes ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNotesAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNotesAsHtml ((String)obj2);
      }
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  setColumnValue.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
 
 /**
  Sets the column value indicated by the given column index.
 
  @param columnIndex An integer indicating the desired column whose value is to
                     be set.
  @param columnValue A string representing the value to be set.
  */
  public void setColumnValue (int columnIndex, String columnValue) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          setYear (columnValue);
          break;
      case ITEM_TYPE_COLUMN_INDEX:
          setItemType (columnValue);
          break;
      case CATEGORY_COLUMN_INDEX:
          setCategory (columnValue);
          break;
      case SEQ_COLUMN_INDEX:
          setSeq (columnValue);
          break;
      case STATE_COLUMN_INDEX:
          setState (columnValue);
          break;
      case FLAGS_COLUMN_INDEX:
          setFlags (columnValue);
          break;
      case WHEN_COLUMN_INDEX:
          setWhen (columnValue);
          break;
      case YMD_COLUMN_INDEX:
          setYmd (columnValue);
          break;
      case WHAT_COLUMN_INDEX:
          setWhat (columnValue);
          break;
      case WHERE_COLUMN_INDEX:
          setWhere (columnValue);
          break;
      case WHERE_NAME_COLUMN_INDEX:
          setWhereName (columnValue);
          break;
      case WHERE_ADDRESS_COLUMN_INDEX:
          setWhereAddress (columnValue);
          break;
      case WHERE_CITY_COLUMN_INDEX:
          setWhereCity (columnValue);
          break;
      case WHERE_STATE_COLUMN_INDEX:
          setWhereState (columnValue);
          break;
      case WHERE_ZIP_COLUMN_INDEX:
          setWhereZip (columnValue);
          break;
      case WHERE_PHONE_COLUMN_INDEX:
          setWherePhone (columnValue);
          break;
      case WHERE_EMAIL_COLUMN_INDEX:
          setWhereEmail (columnValue);
          break;
      case WHERE_MAP_URL_COLUMN_INDEX:
          setWhereMapUrl (columnValue);
          break;
      case WHO_COLUMN_INDEX:
          setWho (columnValue);
          break;
      case WHO_NAME_COLUMN_INDEX:
          setWhoName (columnValue);
          break;
      case WHO_ADDRESS_COLUMN_INDEX:
          setWhoAddress (columnValue);
          break;
      case WHO_CITY_COLUMN_INDEX:
          setWhoCity (columnValue);
          break;
      case WHO_STATE_COLUMN_INDEX:
          setWhoState (columnValue);
          break;
      case WHO_ZIP_COLUMN_INDEX:
          setWhoZip (columnValue);
          break;
      case WHO_PHONE_COLUMN_INDEX:
          setWhoPhone (columnValue);
          break;
      case WHO_EMAIL_COLUMN_INDEX:
          setWhoEmail (columnValue);
          break;
      case WHO_MAP_URL_COLUMN_INDEX:
          setWhoMapUrl (columnValue);
          break;
      case DISCUSS_COLUMN_INDEX:
          setDiscuss (columnValue);
          break;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          setDiscussAsHtml (columnValue);
          break;
      case ACTIONS_COLUMN_INDEX:
          setActions (columnValue);
          break;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          setActionsAsHtml (columnValue);
          break;
      case WHY_COLUMN_INDEX:
          setWhy (columnValue);
          break;
      case TEASER_COLUMN_INDEX:
          setTeaser (columnValue);
          break;
      case BLURB_COLUMN_INDEX:
          setBlurb (columnValue);
          break;
      case TEASER_AS_HTML_COLUMN_INDEX:
          setTeaserAsHtml (columnValue);
          break;
      case BLURB_AS_HTML_COLUMN_INDEX:
          setBlurbAsHtml (columnValue);
          break;
      case COST_COLUMN_INDEX:
          setCost (columnValue);
          break;
      case PURCHASE_COLUMN_INDEX:
          setPurchase (columnValue);
          break;
      case TICKETS_COLUMN_INDEX:
          setTickets (columnValue);
          break;
      case QUANTITY_COLUMN_INDEX:
          setQuantity (columnValue);
          break;
      case PLANNED_INCOME_COLUMN_INDEX:
          setPlannedIncome (columnValue);
          break;
      case ACTUAL_INCOME_COLUMN_INDEX:
          setActualIncome (columnValue);
          break;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          setPlannedExpense (columnValue);
          break;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          setActualExpense (columnValue);
          break;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          setPlannedAttendance (columnValue);
          break;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          setActualAttendance (columnValue);
          break;
      case OVER_UNDER_COLUMN_INDEX:
          setOverUnder (columnValue);
          break;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          setFinanceProjection (columnValue);
          break;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          setPriorYrPlnInc (columnValue);
          break;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          setPriorYrActInc (columnValue);
          break;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          setPriorYrPlnExp (columnValue);
          break;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          setPriorYrActExp (columnValue);
          break;
      case RECAP_COLUMN_INDEX:
          setRecap (columnValue);
          break;
      case RECAP_AS_HTML_COLUMN_INDEX:
          setRecapAsHtml (columnValue);
          break;
      case ID_COLUMN_INDEX:
          setId (columnValue);
          break;
      case LINK_COLUMN_INDEX:
          setLink (columnValue);
          break;
      case VENUE_COLUMN_INDEX:
          setVenue (columnValue);
          break;
      case IMAGE_COLUMN_INDEX:
          setImage (columnValue);
          break;
      case NEWS_IMAGE_COLUMN_INDEX:
          setNewsImage (columnValue);
          break;
      case CALL_TO_ACTION_COLUMN_INDEX:
          setCallToAction (columnValue);
          break;
      case CTA_LINK_COLUMN_INDEX:
          setCtaLink (columnValue);
          break;
      case LAYOUT_COLUMN_INDEX:
          setLayout (columnValue);
          break;
      case SHORT_DATE_COLUMN_INDEX:
          setShortDate (columnValue);
          break;
      case NOTES_COLUMN_INDEX:
          setNotes (columnValue);
          break;
      case NOTES_AS_HTML_COLUMN_INDEX:
          setNotesAsHtml (columnValue);
          break;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnValue.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the value at the given column index.
   */
  public Object getColumnValue (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return year;
      case ITEM_TYPE_COLUMN_INDEX:
          return itemType;
      case CATEGORY_COLUMN_INDEX:
          return category;
      case SEQ_COLUMN_INDEX:
          return seq;
      case STATE_COLUMN_INDEX:
          return state;
      case FLAGS_COLUMN_INDEX:
          return flags;
      case WHEN_COLUMN_INDEX:
          return when;
      case YMD_COLUMN_INDEX:
          return ymd;
      case WHAT_COLUMN_INDEX:
          return what;
      case WHERE_COLUMN_INDEX:
          return where;
      case WHERE_NAME_COLUMN_INDEX:
          return whereName;
      case WHERE_ADDRESS_COLUMN_INDEX:
          return whereAddress;
      case WHERE_CITY_COLUMN_INDEX:
          return whereCity;
      case WHERE_STATE_COLUMN_INDEX:
          return whereState;
      case WHERE_ZIP_COLUMN_INDEX:
          return whereZip;
      case WHERE_PHONE_COLUMN_INDEX:
          return wherePhone;
      case WHERE_EMAIL_COLUMN_INDEX:
          return whereEmail;
      case WHERE_MAP_URL_COLUMN_INDEX:
          return whereMapUrl;
      case WHO_COLUMN_INDEX:
          return who;
      case WHO_NAME_COLUMN_INDEX:
          return whoName;
      case WHO_ADDRESS_COLUMN_INDEX:
          return whoAddress;
      case WHO_CITY_COLUMN_INDEX:
          return whoCity;
      case WHO_STATE_COLUMN_INDEX:
          return whoState;
      case WHO_ZIP_COLUMN_INDEX:
          return whoZip;
      case WHO_PHONE_COLUMN_INDEX:
          return whoPhone;
      case WHO_EMAIL_COLUMN_INDEX:
          return whoEmail;
      case WHO_MAP_URL_COLUMN_INDEX:
          return whoMapUrl;
      case DISCUSS_COLUMN_INDEX:
          return discuss;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          return discussAsHtml;
      case ACTIONS_COLUMN_INDEX:
          return actions;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          return actionsAsHtml;
      case WHY_COLUMN_INDEX:
          return why;
      case TEASER_COLUMN_INDEX:
          return teaser;
      case BLURB_COLUMN_INDEX:
          return blurb;
      case TEASER_AS_HTML_COLUMN_INDEX:
          return teaserAsHtml;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return blurbAsHtml;
      case COST_COLUMN_INDEX:
          return cost;
      case PURCHASE_COLUMN_INDEX:
          return purchase;
      case TICKETS_COLUMN_INDEX:
          return tickets;
      case QUANTITY_COLUMN_INDEX:
          return quantity;
      case PLANNED_INCOME_COLUMN_INDEX:
          return plannedIncome;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return actualIncome;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return plannedExpense;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return actualExpense;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return plannedAttendance;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return actualAttendance;
      case OVER_UNDER_COLUMN_INDEX:
          return overUnder;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return financeProjection;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          return priorYrPlnInc;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          return priorYrActInc;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          return priorYrPlnExp;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          return priorYrActExp;
      case RECAP_COLUMN_INDEX:
          return recap;
      case RECAP_AS_HTML_COLUMN_INDEX:
          return recapAsHtml;
      case ID_COLUMN_INDEX:
          return id;
      case LINK_COLUMN_INDEX:
          return link;
      case VENUE_COLUMN_INDEX:
          return venue;
      case IMAGE_COLUMN_INDEX:
          return image;
      case NEWS_IMAGE_COLUMN_INDEX:
          return newsImage;
      case CALL_TO_ACTION_COLUMN_INDEX:
          return callToAction;
      case CTA_LINK_COLUMN_INDEX:
          return ctaLink;
      case LAYOUT_COLUMN_INDEX:
          return layout;
      case SHORT_DATE_COLUMN_INDEX:
          return shortDate;
      case NOTES_COLUMN_INDEX:
          return notes;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return notesAsHtml;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnName.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the field name for the given column index.
   */
  public static String getColumnName (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COLUMN_NAME;
      case ITEM_TYPE_COLUMN_INDEX:
          return ITEM_TYPE_COLUMN_NAME;
      case CATEGORY_COLUMN_INDEX:
          return CATEGORY_COLUMN_NAME;
      case SEQ_COLUMN_INDEX:
          return SEQ_COLUMN_NAME;
      case STATE_COLUMN_INDEX:
          return STATE_COLUMN_NAME;
      case FLAGS_COLUMN_INDEX:
          return FLAGS_COLUMN_NAME;
      case WHEN_COLUMN_INDEX:
          return WHEN_COLUMN_NAME;
      case YMD_COLUMN_INDEX:
          return YMD_COLUMN_NAME;
      case WHAT_COLUMN_INDEX:
          return WHAT_COLUMN_NAME;
      case WHERE_COLUMN_INDEX:
          return WHERE_COLUMN_NAME;
      case WHERE_NAME_COLUMN_INDEX:
          return WHERE_NAME_COLUMN_NAME;
      case WHERE_ADDRESS_COLUMN_INDEX:
          return WHERE_ADDRESS_COLUMN_NAME;
      case WHERE_CITY_COLUMN_INDEX:
          return WHERE_CITY_COLUMN_NAME;
      case WHERE_STATE_COLUMN_INDEX:
          return WHERE_STATE_COLUMN_NAME;
      case WHERE_ZIP_COLUMN_INDEX:
          return WHERE_ZIP_COLUMN_NAME;
      case WHERE_PHONE_COLUMN_INDEX:
          return WHERE_PHONE_COLUMN_NAME;
      case WHERE_EMAIL_COLUMN_INDEX:
          return WHERE_EMAIL_COLUMN_NAME;
      case WHERE_MAP_URL_COLUMN_INDEX:
          return WHERE_MAP_URL_COLUMN_NAME;
      case WHO_COLUMN_INDEX:
          return WHO_COLUMN_NAME;
      case WHO_NAME_COLUMN_INDEX:
          return WHO_NAME_COLUMN_NAME;
      case WHO_ADDRESS_COLUMN_INDEX:
          return WHO_ADDRESS_COLUMN_NAME;
      case WHO_CITY_COLUMN_INDEX:
          return WHO_CITY_COLUMN_NAME;
      case WHO_STATE_COLUMN_INDEX:
          return WHO_STATE_COLUMN_NAME;
      case WHO_ZIP_COLUMN_INDEX:
          return WHO_ZIP_COLUMN_NAME;
      case WHO_PHONE_COLUMN_INDEX:
          return WHO_PHONE_COLUMN_NAME;
      case WHO_EMAIL_COLUMN_INDEX:
          return WHO_EMAIL_COLUMN_NAME;
      case WHO_MAP_URL_COLUMN_INDEX:
          return WHO_MAP_URL_COLUMN_NAME;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COLUMN_NAME;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          return DISCUSS_AS_HTML_COLUMN_NAME;
      case ACTIONS_COLUMN_INDEX:
          return ACTIONS_COLUMN_NAME;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          return ACTIONS_AS_HTML_COLUMN_NAME;
      case WHY_COLUMN_INDEX:
          return WHY_COLUMN_NAME;
      case TEASER_COLUMN_INDEX:
          return TEASER_COLUMN_NAME;
      case BLURB_COLUMN_INDEX:
          return BLURB_COLUMN_NAME;
      case TEASER_AS_HTML_COLUMN_INDEX:
          return TEASER_AS_HTML_COLUMN_NAME;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COLUMN_NAME;
      case COST_COLUMN_INDEX:
          return COST_COLUMN_NAME;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COLUMN_NAME;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COLUMN_NAME;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COLUMN_NAME;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COLUMN_NAME;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COLUMN_NAME;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COLUMN_NAME;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COLUMN_NAME;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COLUMN_NAME;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COLUMN_NAME;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COLUMN_NAME;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COLUMN_NAME;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          return PRIOR_YR_PLN_INC_COLUMN_NAME;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          return PRIOR_YR_ACT_INC_COLUMN_NAME;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          return PRIOR_YR_PLN_EXP_COLUMN_NAME;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          return PRIOR_YR_ACT_EXP_COLUMN_NAME;
      case RECAP_COLUMN_INDEX:
          return RECAP_COLUMN_NAME;
      case RECAP_AS_HTML_COLUMN_INDEX:
          return RECAP_AS_HTML_COLUMN_NAME;
      case ID_COLUMN_INDEX:
          return ID_COLUMN_NAME;
      case LINK_COLUMN_INDEX:
          return LINK_COLUMN_NAME;
      case VENUE_COLUMN_INDEX:
          return VENUE_COLUMN_NAME;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COLUMN_NAME;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COLUMN_NAME;
      case CALL_TO_ACTION_COLUMN_INDEX:
          return CALL_TO_ACTION_COLUMN_NAME;
      case CTA_LINK_COLUMN_INDEX:
          return CTA_LINK_COLUMN_NAME;
      case LAYOUT_COLUMN_INDEX:
          return LAYOUT_COLUMN_NAME;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COLUMN_NAME;
      case NOTES_COLUMN_INDEX:
          return NOTES_COLUMN_NAME;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COLUMN_NAME;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getCommonName.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the common name (all lower case, no word separators)
     for the given column index.
   */
  public static String getCommonName (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COMMON_NAME;
      case ITEM_TYPE_COLUMN_INDEX:
          return ITEM_TYPE_COMMON_NAME;
      case CATEGORY_COLUMN_INDEX:
          return CATEGORY_COMMON_NAME;
      case SEQ_COLUMN_INDEX:
          return SEQ_COMMON_NAME;
      case STATE_COLUMN_INDEX:
          return STATE_COMMON_NAME;
      case FLAGS_COLUMN_INDEX:
          return FLAGS_COMMON_NAME;
      case WHEN_COLUMN_INDEX:
          return WHEN_COMMON_NAME;
      case YMD_COLUMN_INDEX:
          return YMD_COMMON_NAME;
      case WHAT_COLUMN_INDEX:
          return WHAT_COMMON_NAME;
      case WHERE_COLUMN_INDEX:
          return WHERE_COMMON_NAME;
      case WHERE_NAME_COLUMN_INDEX:
          return WHERE_NAME_COMMON_NAME;
      case WHERE_ADDRESS_COLUMN_INDEX:
          return WHERE_ADDRESS_COMMON_NAME;
      case WHERE_CITY_COLUMN_INDEX:
          return WHERE_CITY_COMMON_NAME;
      case WHERE_STATE_COLUMN_INDEX:
          return WHERE_STATE_COMMON_NAME;
      case WHERE_ZIP_COLUMN_INDEX:
          return WHERE_ZIP_COMMON_NAME;
      case WHERE_PHONE_COLUMN_INDEX:
          return WHERE_PHONE_COMMON_NAME;
      case WHERE_EMAIL_COLUMN_INDEX:
          return WHERE_EMAIL_COMMON_NAME;
      case WHERE_MAP_URL_COLUMN_INDEX:
          return WHERE_MAP_URL_COMMON_NAME;
      case WHO_COLUMN_INDEX:
          return WHO_COMMON_NAME;
      case WHO_NAME_COLUMN_INDEX:
          return WHO_NAME_COMMON_NAME;
      case WHO_ADDRESS_COLUMN_INDEX:
          return WHO_ADDRESS_COMMON_NAME;
      case WHO_CITY_COLUMN_INDEX:
          return WHO_CITY_COMMON_NAME;
      case WHO_STATE_COLUMN_INDEX:
          return WHO_STATE_COMMON_NAME;
      case WHO_ZIP_COLUMN_INDEX:
          return WHO_ZIP_COMMON_NAME;
      case WHO_PHONE_COLUMN_INDEX:
          return WHO_PHONE_COMMON_NAME;
      case WHO_EMAIL_COLUMN_INDEX:
          return WHO_EMAIL_COMMON_NAME;
      case WHO_MAP_URL_COLUMN_INDEX:
          return WHO_MAP_URL_COMMON_NAME;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COMMON_NAME;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          return DISCUSS_AS_HTML_COMMON_NAME;
      case ACTIONS_COLUMN_INDEX:
          return ACTIONS_COMMON_NAME;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          return ACTIONS_AS_HTML_COMMON_NAME;
      case WHY_COLUMN_INDEX:
          return WHY_COMMON_NAME;
      case TEASER_COLUMN_INDEX:
          return TEASER_COMMON_NAME;
      case BLURB_COLUMN_INDEX:
          return BLURB_COMMON_NAME;
      case TEASER_AS_HTML_COLUMN_INDEX:
          return TEASER_AS_HTML_COMMON_NAME;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COMMON_NAME;
      case COST_COLUMN_INDEX:
          return COST_COMMON_NAME;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COMMON_NAME;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COMMON_NAME;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COMMON_NAME;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COMMON_NAME;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COMMON_NAME;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COMMON_NAME;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COMMON_NAME;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COMMON_NAME;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COMMON_NAME;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COMMON_NAME;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COMMON_NAME;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          return PRIOR_YR_PLN_INC_COMMON_NAME;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          return PRIOR_YR_ACT_INC_COMMON_NAME;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          return PRIOR_YR_PLN_EXP_COMMON_NAME;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          return PRIOR_YR_ACT_EXP_COMMON_NAME;
      case RECAP_COLUMN_INDEX:
          return RECAP_COMMON_NAME;
      case RECAP_AS_HTML_COLUMN_INDEX:
          return RECAP_AS_HTML_COMMON_NAME;
      case ID_COLUMN_INDEX:
          return ID_COMMON_NAME;
      case LINK_COLUMN_INDEX:
          return LINK_COMMON_NAME;
      case VENUE_COLUMN_INDEX:
          return VENUE_COMMON_NAME;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COMMON_NAME;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COMMON_NAME;
      case CALL_TO_ACTION_COLUMN_INDEX:
          return CALL_TO_ACTION_COMMON_NAME;
      case CTA_LINK_COLUMN_INDEX:
          return CTA_LINK_COMMON_NAME;
      case LAYOUT_COLUMN_INDEX:
          return LAYOUT_COMMON_NAME;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COMMON_NAME;
      case NOTES_COLUMN_INDEX:
          return NOTES_COMMON_NAME;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COMMON_NAME;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnWidth.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the field name for the given column index.
   */
  public static int getColumnWidth (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COLUMN_WIDTH;
      case ITEM_TYPE_COLUMN_INDEX:
          return ITEM_TYPE_COLUMN_WIDTH;
      case CATEGORY_COLUMN_INDEX:
          return CATEGORY_COLUMN_WIDTH;
      case SEQ_COLUMN_INDEX:
          return SEQ_COLUMN_WIDTH;
      case STATE_COLUMN_INDEX:
          return STATE_COLUMN_WIDTH;
      case FLAGS_COLUMN_INDEX:
          return FLAGS_COLUMN_WIDTH;
      case WHEN_COLUMN_INDEX:
          return WHEN_COLUMN_WIDTH;
      case YMD_COLUMN_INDEX:
          return YMD_COLUMN_WIDTH;
      case WHAT_COLUMN_INDEX:
          return WHAT_COLUMN_WIDTH;
      case WHERE_COLUMN_INDEX:
          return WHERE_COLUMN_WIDTH;
      case WHERE_NAME_COLUMN_INDEX:
          return WHERE_NAME_COLUMN_WIDTH;
      case WHERE_ADDRESS_COLUMN_INDEX:
          return WHERE_ADDRESS_COLUMN_WIDTH;
      case WHERE_CITY_COLUMN_INDEX:
          return WHERE_CITY_COLUMN_WIDTH;
      case WHERE_STATE_COLUMN_INDEX:
          return WHERE_STATE_COLUMN_WIDTH;
      case WHERE_ZIP_COLUMN_INDEX:
          return WHERE_ZIP_COLUMN_WIDTH;
      case WHERE_PHONE_COLUMN_INDEX:
          return WHERE_PHONE_COLUMN_WIDTH;
      case WHERE_EMAIL_COLUMN_INDEX:
          return WHERE_EMAIL_COLUMN_WIDTH;
      case WHERE_MAP_URL_COLUMN_INDEX:
          return WHERE_MAP_URL_COLUMN_WIDTH;
      case WHO_COLUMN_INDEX:
          return WHO_COLUMN_WIDTH;
      case WHO_NAME_COLUMN_INDEX:
          return WHO_NAME_COLUMN_WIDTH;
      case WHO_ADDRESS_COLUMN_INDEX:
          return WHO_ADDRESS_COLUMN_WIDTH;
      case WHO_CITY_COLUMN_INDEX:
          return WHO_CITY_COLUMN_WIDTH;
      case WHO_STATE_COLUMN_INDEX:
          return WHO_STATE_COLUMN_WIDTH;
      case WHO_ZIP_COLUMN_INDEX:
          return WHO_ZIP_COLUMN_WIDTH;
      case WHO_PHONE_COLUMN_INDEX:
          return WHO_PHONE_COLUMN_WIDTH;
      case WHO_EMAIL_COLUMN_INDEX:
          return WHO_EMAIL_COLUMN_WIDTH;
      case WHO_MAP_URL_COLUMN_INDEX:
          return WHO_MAP_URL_COLUMN_WIDTH;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COLUMN_WIDTH;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          return DISCUSS_AS_HTML_COLUMN_WIDTH;
      case ACTIONS_COLUMN_INDEX:
          return ACTIONS_COLUMN_WIDTH;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          return ACTIONS_AS_HTML_COLUMN_WIDTH;
      case WHY_COLUMN_INDEX:
          return WHY_COLUMN_WIDTH;
      case TEASER_COLUMN_INDEX:
          return TEASER_COLUMN_WIDTH;
      case BLURB_COLUMN_INDEX:
          return BLURB_COLUMN_WIDTH;
      case TEASER_AS_HTML_COLUMN_INDEX:
          return TEASER_AS_HTML_COLUMN_WIDTH;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COLUMN_WIDTH;
      case COST_COLUMN_INDEX:
          return COST_COLUMN_WIDTH;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COLUMN_WIDTH;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COLUMN_WIDTH;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COLUMN_WIDTH;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COLUMN_WIDTH;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COLUMN_WIDTH;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COLUMN_WIDTH;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COLUMN_WIDTH;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COLUMN_WIDTH;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COLUMN_WIDTH;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COLUMN_WIDTH;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COLUMN_WIDTH;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          return PRIOR_YR_PLN_INC_COLUMN_WIDTH;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          return PRIOR_YR_ACT_INC_COLUMN_WIDTH;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          return PRIOR_YR_PLN_EXP_COLUMN_WIDTH;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          return PRIOR_YR_ACT_EXP_COLUMN_WIDTH;
      case RECAP_COLUMN_INDEX:
          return RECAP_COLUMN_WIDTH;
      case RECAP_AS_HTML_COLUMN_INDEX:
          return RECAP_AS_HTML_COLUMN_WIDTH;
      case ID_COLUMN_INDEX:
          return ID_COLUMN_WIDTH;
      case LINK_COLUMN_INDEX:
          return LINK_COLUMN_WIDTH;
      case VENUE_COLUMN_INDEX:
          return VENUE_COLUMN_WIDTH;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COLUMN_WIDTH;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COLUMN_WIDTH;
      case CALL_TO_ACTION_COLUMN_INDEX:
          return CALL_TO_ACTION_COLUMN_WIDTH;
      case CTA_LINK_COLUMN_INDEX:
          return CTA_LINK_COLUMN_WIDTH;
      case LAYOUT_COLUMN_INDEX:
          return LAYOUT_COLUMN_WIDTH;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COLUMN_WIDTH;
      case NOTES_COLUMN_INDEX:
          return NOTES_COLUMN_WIDTH;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COLUMN_WIDTH;
      default: return 20;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnClass.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the class of the field at the given column index.
   */
  public static Class getColumnClass (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return String.class;
      case ITEM_TYPE_COLUMN_INDEX:
          return String.class;
      case CATEGORY_COLUMN_INDEX:
          return String.class;
      case SEQ_COLUMN_INDEX:
          return String.class;
      case STATE_COLUMN_INDEX:
          return ItemStatus.class;
      case FLAGS_COLUMN_INDEX:
          return Tags.class;
      case WHEN_COLUMN_INDEX:
          return String.class;
      case YMD_COLUMN_INDEX:
          return String.class;
      case WHAT_COLUMN_INDEX:
          return String.class;
      case WHERE_COLUMN_INDEX:
          return ContactInfo.class;
      case WHERE_NAME_COLUMN_INDEX:
          return String.class;
      case WHERE_ADDRESS_COLUMN_INDEX:
          return String.class;
      case WHERE_CITY_COLUMN_INDEX:
          return String.class;
      case WHERE_STATE_COLUMN_INDEX:
          return String.class;
      case WHERE_ZIP_COLUMN_INDEX:
          return String.class;
      case WHERE_PHONE_COLUMN_INDEX:
          return String.class;
      case WHERE_EMAIL_COLUMN_INDEX:
          return String.class;
      case WHERE_MAP_URL_COLUMN_INDEX:
          return String.class;
      case WHO_COLUMN_INDEX:
          return ContactInfo.class;
      case WHO_NAME_COLUMN_INDEX:
          return String.class;
      case WHO_ADDRESS_COLUMN_INDEX:
          return String.class;
      case WHO_CITY_COLUMN_INDEX:
          return String.class;
      case WHO_STATE_COLUMN_INDEX:
          return String.class;
      case WHO_ZIP_COLUMN_INDEX:
          return String.class;
      case WHO_PHONE_COLUMN_INDEX:
          return String.class;
      case WHO_EMAIL_COLUMN_INDEX:
          return String.class;
      case WHO_MAP_URL_COLUMN_INDEX:
          return String.class;
      case DISCUSS_COLUMN_INDEX:
          return String.class;
      case DISCUSS_AS_HTML_COLUMN_INDEX:
          return String.class;
      case ACTIONS_COLUMN_INDEX:
          return String.class;
      case ACTIONS_AS_HTML_COLUMN_INDEX:
          return String.class;
      case WHY_COLUMN_INDEX:
          return String.class;
      case TEASER_COLUMN_INDEX:
          return String.class;
      case BLURB_COLUMN_INDEX:
          return String.class;
      case TEASER_AS_HTML_COLUMN_INDEX:
          return String.class;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return String.class;
      case COST_COLUMN_INDEX:
          return String.class;
      case PURCHASE_COLUMN_INDEX:
          return String.class;
      case TICKETS_COLUMN_INDEX:
          return String.class;
      case QUANTITY_COLUMN_INDEX:
          return String.class;
      case PLANNED_INCOME_COLUMN_INDEX:
          return String.class;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return String.class;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return String.class;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return String.class;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return String.class;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return String.class;
      case OVER_UNDER_COLUMN_INDEX:
          return String.class;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return String.class;
      case PRIOR_YR_PLN_INC_COLUMN_INDEX:
          return String.class;
      case PRIOR_YR_ACT_INC_COLUMN_INDEX:
          return String.class;
      case PRIOR_YR_PLN_EXP_COLUMN_INDEX:
          return String.class;
      case PRIOR_YR_ACT_EXP_COLUMN_INDEX:
          return String.class;
      case RECAP_COLUMN_INDEX:
          return String.class;
      case RECAP_AS_HTML_COLUMN_INDEX:
          return String.class;
      case ID_COLUMN_INDEX:
          return String.class;
      case LINK_COLUMN_INDEX:
          return String.class;
      case VENUE_COLUMN_INDEX:
          return String.class;
      case IMAGE_COLUMN_INDEX:
          return String.class;
      case NEWS_IMAGE_COLUMN_INDEX:
          return String.class;
      case CALL_TO_ACTION_COLUMN_INDEX:
          return String.class;
      case CTA_LINK_COLUMN_INDEX:
          return String.class;
      case LAYOUT_COLUMN_INDEX:
          return String.class;
      case SHORT_DATE_COLUMN_INDEX:
          return String.class;
      case NOTES_COLUMN_INDEX:
          return String.class;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return String.class;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  isMarkdownFormat.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Indicates whether the field at the given column index should be in Markdown format.
   */
  public static boolean isMarkdownFormat (int columnIndex) {
    switch (columnIndex) {
      case DISCUSS_COLUMN_INDEX:
          return true;
      case ACTIONS_COLUMN_INDEX:
          return true;
      case TEASER_COLUMN_INDEX:
          return true;
      case BLURB_COLUMN_INDEX:
          return true;
      case RECAP_COLUMN_INDEX:
          return true;
      case NOTES_COLUMN_INDEX:
          return true;
      default: return false;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  variable-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
 
  /**
     Sets the year for this club event.
 
     @param  year The year for this club event.
   */
  public void setYear (String year) {
    this.year = year;
    setModified (true);
  }

  /**
    Returns the year for this club event as a string.
 
    @return The year for this club event as a string.
   */
  public String getYearAsString () {
    if (hasYear()) {
      return getYear().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the year for this club event is null.
 
    @return True if the year for this club event is not null.
   */
  public boolean hasYear () {
    return (year != null);
  }

  /**
    Determines if the year for this club event
    is null or is empty.
 
    @return True if the year for this club event
    is not null and not empty.
   */
  public boolean hasYearWithData () {
    return (year != null && year.length() > 0);
  }

  /**
    Returns the year for this club event.
 
    @return The year for this club event.
   */
  public String getYear () {
    return year;
  }
 
  /**
     Sets the item type for this club event.
 
     @param  itemType The item type for this club event.
   */
  public void setItemType (String itemType) {
    this.itemType = itemType;
    setModified (true);
  }

  /**
    Returns the item type for this club event as a string.
 
    @return The item type for this club event as a string.
   */
  public String getItemTypeAsString () {
    if (hasItemType()) {
      return getItemType().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the item type for this club event is null.
 
    @return True if the item type for this club event is not null.
   */
  public boolean hasItemType () {
    return (itemType != null);
  }

  /**
    Determines if the item type for this club event
    is null or is empty.
 
    @return True if the item type for this club event
    is not null and not empty.
   */
  public boolean hasItemTypeWithData () {
    return (itemType != null && itemType.length() > 0);
  }

  /**
    Returns the item type for this club event.
 
    @return The item type for this club event.
   */
  public String getItemType () {
    return itemType;
  }
 
  /**
     Sets the category for this club event.
 
     @param  category The category for this club event.
   */
  public void setCategory (String category) {
    this.category = category;
    setModified (true);
  }

  /**
    Returns the category for this club event as a string.
 
    @return The category for this club event as a string.
   */
  public String getCategoryAsString () {
    if (hasCategory()) {
      return getCategory().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the category for this club event is null.
 
    @return True if the category for this club event is not null.
   */
  public boolean hasCategory () {
    return (category != null);
  }

  /**
    Determines if the category for this club event
    is null or is empty.
 
    @return True if the category for this club event
    is not null and not empty.
   */
  public boolean hasCategoryWithData () {
    return (category != null && category.length() > 0);
  }

  /**
    Returns the category for this club event.
 
    @return The category for this club event.
   */
  public String getCategory () {
    return category;
  }
 
  /**
     Sets the seq for this club event.
 
     @param  seq The seq for this club event.
   */
  public void setSeq (String seq) {
    this.seq = seq;
    setModified (true);
  }

  /**
    Returns the seq for this club event as a string.
 
    @return The seq for this club event as a string.
   */
  public String getSeqAsString () {
    if (hasSeq()) {
      return getSeq().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the seq for this club event is null.
 
    @return True if the seq for this club event is not null.
   */
  public boolean hasSeq () {
    return (seq != null);
  }

  /**
    Determines if the seq for this club event
    is null or is empty.
 
    @return True if the seq for this club event
    is not null and not empty.
   */
  public boolean hasSeqWithData () {
    return (seq != null && seq.length() > 0);
  }

  /**
    Returns the seq for this club event.
 
    @return The seq for this club event.
   */
  public String getSeq () {
    return seq;
  }
 
  /**
     Sets the state for this club event.
 
     @param  state The state for this club event.
   */
  public void setState (ItemStatus state) {
    this.state = state;
    setModified (true);
  }

  /**
     Sets the state for this club event.
 
     @param  state The state for this club event.
   */
  public void setState (String state) {
    this.state.set(state);
    setModified (true);
  }

  /**
    Returns the state for this club event as a string.
 
    @return The state for this club event as a string.
   */
  public String getStateAsString () {
    if (hasState()) {
      return getState().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the state for this club event is null.
 
    @return True if the state for this club event is not null.
   */
  public boolean hasState () {
    return (state != null);
  }

  /**
    Returns the state for this club event.
 
    @return The state for this club event.
   */
  public ItemStatus getState () {
    return state;
  }
 
  /**
     Sets the flags for this club event.
 
     @param  flags The flags for this club event.
   */
  public void setFlags (Tags flags) {
    this.flags = flags;
    setModified (true);
  }

  /**
     Sets the flags for this club event.
 
     @param  flags The flags for this club event.
   */
  public void setFlags (String flags) {
    this.flags = new Tags(flags);
    setModified (true);
  }

  /**
    Returns the flags for this club event as a string.
 
    @return The flags for this club event as a string.
   */
  public String getFlagsAsString () {
    if (hasFlags()) {
      return getFlags().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the flags for this club event is null.
 
    @return True if the flags for this club event is not null.
   */
  public boolean hasFlags () {
    return (flags != null);
  }

  /**
    Determines if the flags for this club event
    is null or is empty.
 
    @return True if the flags for this club event
    is not null and not empty.
   */
  public boolean hasFlagsWithData () {
    return (flags != null && flags.length() > 0);
  }

  /**
    Returns the flags for this club event.
 
    @return The flags for this club event.
   */
  public Tags getFlags () {
    return flags;
  }
 
  /**
     Sets the when for this club event.
 
     @param  when The when for this club event.
   */
  public void setWhen (String when) {
    this.when = when;
    setModified (true);
  }

  /**
    Returns the when for this club event as a string.
 
    @return The when for this club event as a string.
   */
  public String getWhenAsString () {
    if (hasWhen()) {
      return getWhen().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the when for this club event is null.
 
    @return True if the when for this club event is not null.
   */
  public boolean hasWhen () {
    return (when != null);
  }

  /**
    Determines if the when for this club event
    is null or is empty.
 
    @return True if the when for this club event
    is not null and not empty.
   */
  public boolean hasWhenWithData () {
    return (when != null && when.length() > 0);
  }

  /**
    Returns the when for this club event.
 
    @return The when for this club event.
   */
  public String getWhen () {
    return when;
  }
 
  /**
     Sets the ymd for this club event.
 
     @param  ymd The ymd for this club event.
   */
  public void setYmd (String ymd) {
    this.ymd = ymd;
    setModified (true);
  }

  /**
    Returns the ymd for this club event as a string.
 
    @return The ymd for this club event as a string.
   */
  public String getYmdAsString () {
    if (hasYmd()) {
      return getYmd().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the ymd for this club event is null.
 
    @return True if the ymd for this club event is not null.
   */
  public boolean hasYmd () {
    return (ymd != null);
  }

  /**
    Determines if the ymd for this club event
    is null or is empty.
 
    @return True if the ymd for this club event
    is not null and not empty.
   */
  public boolean hasYmdWithData () {
    return (ymd != null && ymd.length() > 0);
  }

  /**
    Returns the ymd for this club event.
 
    @return The ymd for this club event.
   */
  public String getYmd () {
    return ymd;
  }
 
  /**
     Sets the what for this club event.
 
     @param  what The what for this club event.
   */
  public void setWhat (String what) {
    this.what = what;
    setModified (true);
  }

  /**
    Returns the what for this club event as a string.
 
    @return The what for this club event as a string.
   */
  public String getWhatAsString () {
    if (hasWhat()) {
      return getWhat().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the what for this club event is null.
 
    @return True if the what for this club event is not null.
   */
  public boolean hasWhat () {
    return (what != null);
  }

  /**
    Determines if the what for this club event
    is null or is empty.
 
    @return True if the what for this club event
    is not null and not empty.
   */
  public boolean hasWhatWithData () {
    return (what != null && what.length() > 0);
  }

  /**
    Returns the what for this club event.
 
    @return The what for this club event.
   */
  public String getWhat () {
    return what;
  }
 
  /**
     Sets the where for this club event.
 
     @param  where The where for this club event.
   */
  public void setWhere (ContactInfo where) {
    this.where = where;
    setModified (true);
  }

  /**
     Sets the where for this club event.
 
     @param  where The where for this club event.
   */
  public void setWhere (String where) {
    this.where = new ContactInfo(where);
    setModified (true);
  }

  /**
    Returns the where for this club event as a string.
 
    @return The where for this club event as a string.
   */
  public String getWhereAsString () {
    if (hasWhere()) {
      return getWhere().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where for this club event is null.
 
    @return True if the where for this club event is not null.
   */
  public boolean hasWhere () {
    return (where != null);
  }

  /**
    Determines if the where for this club event
    is null or is empty.
 
    @return True if the where for this club event
    is not null and not empty.
   */
  public boolean hasWhereWithData () {
    return (where != null && where.length() > 0);
  }

  /**
    Returns the where for this club event.
 
    @return The where for this club event.
   */
  public ContactInfo getWhere () {
    return where;
  }
 
  /**
     Sets the where name for this club event.
 
     @param  whereName The where name for this club event.
   */
  public void setWhereName (String whereName) {
    this.whereName = whereName;
    setModified (true);
  }

  /**
    Returns the where name for this club event as a string.
 
    @return The where name for this club event as a string.
   */
  public String getWhereNameAsString () {
    if (hasWhereName()) {
      return getWhereName().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where name for this club event is null.
 
    @return True if the where name for this club event is not null.
   */
  public boolean hasWhereName () {
    return (whereName != null);
  }

  /**
    Determines if the where name for this club event
    is null or is empty.
 
    @return True if the where name for this club event
    is not null and not empty.
   */
  public boolean hasWhereNameWithData () {
    return (whereName != null && whereName.length() > 0);
  }

  /**
    Returns the where name for this club event.
 
    @return The where name for this club event.
   */
  public String getWhereName () {
    return whereName;
  }
 
  /**
     Sets the where address for this club event.
 
     @param  whereAddress The where address for this club event.
   */
  public void setWhereAddress (String whereAddress) {
    this.whereAddress = whereAddress;
    setModified (true);
  }

  /**
    Returns the where address for this club event as a string.
 
    @return The where address for this club event as a string.
   */
  public String getWhereAddressAsString () {
    if (hasWhereAddress()) {
      return getWhereAddress().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where address for this club event is null.
 
    @return True if the where address for this club event is not null.
   */
  public boolean hasWhereAddress () {
    return (whereAddress != null);
  }

  /**
    Determines if the where address for this club event
    is null or is empty.
 
    @return True if the where address for this club event
    is not null and not empty.
   */
  public boolean hasWhereAddressWithData () {
    return (whereAddress != null && whereAddress.length() > 0);
  }

  /**
    Returns the where address for this club event.
 
    @return The where address for this club event.
   */
  public String getWhereAddress () {
    return whereAddress;
  }
 
  /**
     Sets the where city for this club event.
 
     @param  whereCity The where city for this club event.
   */
  public void setWhereCity (String whereCity) {
    this.whereCity = whereCity;
    setModified (true);
  }

  /**
    Returns the where city for this club event as a string.
 
    @return The where city for this club event as a string.
   */
  public String getWhereCityAsString () {
    if (hasWhereCity()) {
      return getWhereCity().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where city for this club event is null.
 
    @return True if the where city for this club event is not null.
   */
  public boolean hasWhereCity () {
    return (whereCity != null);
  }

  /**
    Determines if the where city for this club event
    is null or is empty.
 
    @return True if the where city for this club event
    is not null and not empty.
   */
  public boolean hasWhereCityWithData () {
    return (whereCity != null && whereCity.length() > 0);
  }

  /**
    Returns the where city for this club event.
 
    @return The where city for this club event.
   */
  public String getWhereCity () {
    return whereCity;
  }
 
  /**
     Sets the where state for this club event.
 
     @param  whereState The where state for this club event.
   */
  public void setWhereState (String whereState) {
    this.whereState = whereState;
    setModified (true);
  }

  /**
    Returns the where state for this club event as a string.
 
    @return The where state for this club event as a string.
   */
  public String getWhereStateAsString () {
    if (hasWhereState()) {
      return getWhereState().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where state for this club event is null.
 
    @return True if the where state for this club event is not null.
   */
  public boolean hasWhereState () {
    return (whereState != null);
  }

  /**
    Determines if the where state for this club event
    is null or is empty.
 
    @return True if the where state for this club event
    is not null and not empty.
   */
  public boolean hasWhereStateWithData () {
    return (whereState != null && whereState.length() > 0);
  }

  /**
    Returns the where state for this club event.
 
    @return The where state for this club event.
   */
  public String getWhereState () {
    return whereState;
  }
 
  /**
     Sets the where zip for this club event.
 
     @param  whereZip The where zip for this club event.
   */
  public void setWhereZip (String whereZip) {
    this.whereZip = whereZip;
    setModified (true);
  }

  /**
    Returns the where zip for this club event as a string.
 
    @return The where zip for this club event as a string.
   */
  public String getWhereZipAsString () {
    if (hasWhereZip()) {
      return getWhereZip().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where zip for this club event is null.
 
    @return True if the where zip for this club event is not null.
   */
  public boolean hasWhereZip () {
    return (whereZip != null);
  }

  /**
    Determines if the where zip for this club event
    is null or is empty.
 
    @return True if the where zip for this club event
    is not null and not empty.
   */
  public boolean hasWhereZipWithData () {
    return (whereZip != null && whereZip.length() > 0);
  }

  /**
    Returns the where zip for this club event.
 
    @return The where zip for this club event.
   */
  public String getWhereZip () {
    return whereZip;
  }
 
  /**
     Sets the where phone for this club event.
 
     @param  wherePhone The where phone for this club event.
   */
  public void setWherePhone (String wherePhone) {
    this.wherePhone = wherePhone;
    setModified (true);
  }

  /**
    Returns the where phone for this club event as a string.
 
    @return The where phone for this club event as a string.
   */
  public String getWherePhoneAsString () {
    if (hasWherePhone()) {
      return getWherePhone().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where phone for this club event is null.
 
    @return True if the where phone for this club event is not null.
   */
  public boolean hasWherePhone () {
    return (wherePhone != null);
  }

  /**
    Determines if the where phone for this club event
    is null or is empty.
 
    @return True if the where phone for this club event
    is not null and not empty.
   */
  public boolean hasWherePhoneWithData () {
    return (wherePhone != null && wherePhone.length() > 0);
  }

  /**
    Returns the where phone for this club event.
 
    @return The where phone for this club event.
   */
  public String getWherePhone () {
    return wherePhone;
  }
 
  /**
     Sets the where email for this club event.
 
     @param  whereEmail The where email for this club event.
   */
  public void setWhereEmail (String whereEmail) {
    this.whereEmail = whereEmail;
    setModified (true);
  }

  /**
    Returns the where email for this club event as a string.
 
    @return The where email for this club event as a string.
   */
  public String getWhereEmailAsString () {
    if (hasWhereEmail()) {
      return getWhereEmail().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where email for this club event is null.
 
    @return True if the where email for this club event is not null.
   */
  public boolean hasWhereEmail () {
    return (whereEmail != null);
  }

  /**
    Determines if the where email for this club event
    is null or is empty.
 
    @return True if the where email for this club event
    is not null and not empty.
   */
  public boolean hasWhereEmailWithData () {
    return (whereEmail != null && whereEmail.length() > 0);
  }

  /**
    Returns the where email for this club event.
 
    @return The where email for this club event.
   */
  public String getWhereEmail () {
    return whereEmail;
  }
 
  /**
     Sets the where map url for this club event.
 
     @param  whereMapUrl The where map url for this club event.
   */
  public void setWhereMapUrl (String whereMapUrl) {
    this.whereMapUrl = whereMapUrl;
    setModified (true);
  }

  /**
    Returns the where map url for this club event as a string.
 
    @return The where map url for this club event as a string.
   */
  public String getWhereMapUrlAsString () {
    if (hasWhereMapUrl()) {
      return getWhereMapUrl().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where map url for this club event is null.
 
    @return True if the where map url for this club event is not null.
   */
  public boolean hasWhereMapUrl () {
    return (whereMapUrl != null);
  }

  /**
    Determines if the where map url for this club event
    is null or is empty.
 
    @return True if the where map url for this club event
    is not null and not empty.
   */
  public boolean hasWhereMapUrlWithData () {
    return (whereMapUrl != null && whereMapUrl.length() > 0);
  }

  /**
    Returns the where map url for this club event.
 
    @return The where map url for this club event.
   */
  public String getWhereMapUrl () {
    return whereMapUrl;
  }
 
  /**
     Sets the who for this club event.
 
     @param  who The who for this club event.
   */
  public void setWho (ContactInfo who) {
    this.who = who;
    setModified (true);
  }

  /**
     Sets the who for this club event.
 
     @param  who The who for this club event.
   */
  public void setWho (String who) {
    this.who = new ContactInfo(who);
    setModified (true);
  }

  /**
    Returns the who for this club event as a string.
 
    @return The who for this club event as a string.
   */
  public String getWhoAsString () {
    if (hasWho()) {
      return getWho().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who for this club event is null.
 
    @return True if the who for this club event is not null.
   */
  public boolean hasWho () {
    return (who != null);
  }

  /**
    Determines if the who for this club event
    is null or is empty.
 
    @return True if the who for this club event
    is not null and not empty.
   */
  public boolean hasWhoWithData () {
    return (who != null && who.length() > 0);
  }

  /**
    Returns the who for this club event.
 
    @return The who for this club event.
   */
  public ContactInfo getWho () {
    return who;
  }
 
  /**
     Sets the who name for this club event.
 
     @param  whoName The who name for this club event.
   */
  public void setWhoName (String whoName) {
    this.whoName = whoName;
    setModified (true);
  }

  /**
    Returns the who name for this club event as a string.
 
    @return The who name for this club event as a string.
   */
  public String getWhoNameAsString () {
    if (hasWhoName()) {
      return getWhoName().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who name for this club event is null.
 
    @return True if the who name for this club event is not null.
   */
  public boolean hasWhoName () {
    return (whoName != null);
  }

  /**
    Determines if the who name for this club event
    is null or is empty.
 
    @return True if the who name for this club event
    is not null and not empty.
   */
  public boolean hasWhoNameWithData () {
    return (whoName != null && whoName.length() > 0);
  }

  /**
    Returns the who name for this club event.
 
    @return The who name for this club event.
   */
  public String getWhoName () {
    return whoName;
  }
 
  /**
     Sets the who address for this club event.
 
     @param  whoAddress The who address for this club event.
   */
  public void setWhoAddress (String whoAddress) {
    this.whoAddress = whoAddress;
    setModified (true);
  }

  /**
    Returns the who address for this club event as a string.
 
    @return The who address for this club event as a string.
   */
  public String getWhoAddressAsString () {
    if (hasWhoAddress()) {
      return getWhoAddress().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who address for this club event is null.
 
    @return True if the who address for this club event is not null.
   */
  public boolean hasWhoAddress () {
    return (whoAddress != null);
  }

  /**
    Determines if the who address for this club event
    is null or is empty.
 
    @return True if the who address for this club event
    is not null and not empty.
   */
  public boolean hasWhoAddressWithData () {
    return (whoAddress != null && whoAddress.length() > 0);
  }

  /**
    Returns the who address for this club event.
 
    @return The who address for this club event.
   */
  public String getWhoAddress () {
    return whoAddress;
  }
 
  /**
     Sets the who city for this club event.
 
     @param  whoCity The who city for this club event.
   */
  public void setWhoCity (String whoCity) {
    this.whoCity = whoCity;
    setModified (true);
  }

  /**
    Returns the who city for this club event as a string.
 
    @return The who city for this club event as a string.
   */
  public String getWhoCityAsString () {
    if (hasWhoCity()) {
      return getWhoCity().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who city for this club event is null.
 
    @return True if the who city for this club event is not null.
   */
  public boolean hasWhoCity () {
    return (whoCity != null);
  }

  /**
    Determines if the who city for this club event
    is null or is empty.
 
    @return True if the who city for this club event
    is not null and not empty.
   */
  public boolean hasWhoCityWithData () {
    return (whoCity != null && whoCity.length() > 0);
  }

  /**
    Returns the who city for this club event.
 
    @return The who city for this club event.
   */
  public String getWhoCity () {
    return whoCity;
  }
 
  /**
     Sets the who state for this club event.
 
     @param  whoState The who state for this club event.
   */
  public void setWhoState (String whoState) {
    this.whoState = whoState;
    setModified (true);
  }

  /**
    Returns the who state for this club event as a string.
 
    @return The who state for this club event as a string.
   */
  public String getWhoStateAsString () {
    if (hasWhoState()) {
      return getWhoState().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who state for this club event is null.
 
    @return True if the who state for this club event is not null.
   */
  public boolean hasWhoState () {
    return (whoState != null);
  }

  /**
    Determines if the who state for this club event
    is null or is empty.
 
    @return True if the who state for this club event
    is not null and not empty.
   */
  public boolean hasWhoStateWithData () {
    return (whoState != null && whoState.length() > 0);
  }

  /**
    Returns the who state for this club event.
 
    @return The who state for this club event.
   */
  public String getWhoState () {
    return whoState;
  }
 
  /**
     Sets the who zip for this club event.
 
     @param  whoZip The who zip for this club event.
   */
  public void setWhoZip (String whoZip) {
    this.whoZip = whoZip;
    setModified (true);
  }

  /**
    Returns the who zip for this club event as a string.
 
    @return The who zip for this club event as a string.
   */
  public String getWhoZipAsString () {
    if (hasWhoZip()) {
      return getWhoZip().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who zip for this club event is null.
 
    @return True if the who zip for this club event is not null.
   */
  public boolean hasWhoZip () {
    return (whoZip != null);
  }

  /**
    Determines if the who zip for this club event
    is null or is empty.
 
    @return True if the who zip for this club event
    is not null and not empty.
   */
  public boolean hasWhoZipWithData () {
    return (whoZip != null && whoZip.length() > 0);
  }

  /**
    Returns the who zip for this club event.
 
    @return The who zip for this club event.
   */
  public String getWhoZip () {
    return whoZip;
  }
 
  /**
     Sets the who phone for this club event.
 
     @param  whoPhone The who phone for this club event.
   */
  public void setWhoPhone (String whoPhone) {
    this.whoPhone = whoPhone;
    setModified (true);
  }

  /**
    Returns the who phone for this club event as a string.
 
    @return The who phone for this club event as a string.
   */
  public String getWhoPhoneAsString () {
    if (hasWhoPhone()) {
      return getWhoPhone().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who phone for this club event is null.
 
    @return True if the who phone for this club event is not null.
   */
  public boolean hasWhoPhone () {
    return (whoPhone != null);
  }

  /**
    Determines if the who phone for this club event
    is null or is empty.
 
    @return True if the who phone for this club event
    is not null and not empty.
   */
  public boolean hasWhoPhoneWithData () {
    return (whoPhone != null && whoPhone.length() > 0);
  }

  /**
    Returns the who phone for this club event.
 
    @return The who phone for this club event.
   */
  public String getWhoPhone () {
    return whoPhone;
  }
 
  /**
     Sets the who email for this club event.
 
     @param  whoEmail The who email for this club event.
   */
  public void setWhoEmail (String whoEmail) {
    this.whoEmail = whoEmail;
    setModified (true);
  }

  /**
    Returns the who email for this club event as a string.
 
    @return The who email for this club event as a string.
   */
  public String getWhoEmailAsString () {
    if (hasWhoEmail()) {
      return getWhoEmail().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who email for this club event is null.
 
    @return True if the who email for this club event is not null.
   */
  public boolean hasWhoEmail () {
    return (whoEmail != null);
  }

  /**
    Determines if the who email for this club event
    is null or is empty.
 
    @return True if the who email for this club event
    is not null and not empty.
   */
  public boolean hasWhoEmailWithData () {
    return (whoEmail != null && whoEmail.length() > 0);
  }

  /**
    Returns the who email for this club event.
 
    @return The who email for this club event.
   */
  public String getWhoEmail () {
    return whoEmail;
  }
 
  /**
     Sets the who map url for this club event.
 
     @param  whoMapUrl The who map url for this club event.
   */
  public void setWhoMapUrl (String whoMapUrl) {
    this.whoMapUrl = whoMapUrl;
    setModified (true);
  }

  /**
    Returns the who map url for this club event as a string.
 
    @return The who map url for this club event as a string.
   */
  public String getWhoMapUrlAsString () {
    if (hasWhoMapUrl()) {
      return getWhoMapUrl().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who map url for this club event is null.
 
    @return True if the who map url for this club event is not null.
   */
  public boolean hasWhoMapUrl () {
    return (whoMapUrl != null);
  }

  /**
    Determines if the who map url for this club event
    is null or is empty.
 
    @return True if the who map url for this club event
    is not null and not empty.
   */
  public boolean hasWhoMapUrlWithData () {
    return (whoMapUrl != null && whoMapUrl.length() > 0);
  }

  /**
    Returns the who map url for this club event.
 
    @return The who map url for this club event.
   */
  public String getWhoMapUrl () {
    return whoMapUrl;
  }
 
  /**
     Sets the discuss for this club event.
 
     @param  discuss The discuss for this club event.
   */
  public void setDiscuss (String discuss) {
    this.discuss = discuss;
    setModified (true);
  }

  /**
    Returns the discuss for this club event as a string.
 
    @return The discuss for this club event as a string.
   */
  public String getDiscussAsString () {
    if (hasDiscuss()) {
      return getDiscuss().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the discuss for this club event is null.
 
    @return True if the discuss for this club event is not null.
   */
  public boolean hasDiscuss () {
    return (discuss != null);
  }

  /**
    Determines if the discuss for this club event
    is null or is empty.
 
    @return True if the discuss for this club event
    is not null and not empty.
   */
  public boolean hasDiscussWithData () {
    return (discuss != null && discuss.length() > 0);
  }

  /**
    Returns the discuss for this club event.
 
    @return The discuss for this club event.
   */
  public String getDiscuss () {
    return discuss;
  }
 
  /**
     Sets the discuss as html for this club event.
 
     @param  discussAsHtml The discuss as html for this club event.
   */
  public void setDiscussAsHtml (String discussAsHtml) {
    this.discussAsHtml = discussAsHtml;
    setModified (true);
  }

  /**
    Returns the discuss as html for this club event as a string.
 
    @return The discuss as html for this club event as a string.
   */
  public String getDiscussAsHtmlAsString () {
    if (hasDiscussAsHtml()) {
      return getDiscussAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the discuss as html for this club event is null.
 
    @return True if the discuss as html for this club event is not null.
   */
  public boolean hasDiscussAsHtml () {
    return (discussAsHtml != null);
  }

  /**
    Determines if the discuss as html for this club event
    is null or is empty.
 
    @return True if the discuss as html for this club event
    is not null and not empty.
   */
  public boolean hasDiscussAsHtmlWithData () {
    return (discussAsHtml != null && discussAsHtml.length() > 0);
  }

  /**
    Returns the discuss as html for this club event.
 
    @return The discuss as html for this club event.
   */
  public String getDiscussAsHtml () {
    return discussAsHtml;
  }
 
  /**
     Sets the actions for this club event.
 
     @param  actions The actions for this club event.
   */
  public void setActions (String actions) {
    this.actions = actions;
    setModified (true);
  }

  /**
    Returns the actions for this club event as a string.
 
    @return The actions for this club event as a string.
   */
  public String getActionsAsString () {
    if (hasActions()) {
      return getActions().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actions for this club event is null.
 
    @return True if the actions for this club event is not null.
   */
  public boolean hasActions () {
    return (actions != null);
  }

  /**
    Determines if the actions for this club event
    is null or is empty.
 
    @return True if the actions for this club event
    is not null and not empty.
   */
  public boolean hasActionsWithData () {
    return (actions != null && actions.length() > 0);
  }

  /**
    Returns the actions for this club event.
 
    @return The actions for this club event.
   */
  public String getActions () {
    return actions;
  }
 
  /**
     Sets the actions as html for this club event.
 
     @param  actionsAsHtml The actions as html for this club event.
   */
  public void setActionsAsHtml (String actionsAsHtml) {
    this.actionsAsHtml = actionsAsHtml;
    setModified (true);
  }

  /**
    Returns the actions as html for this club event as a string.
 
    @return The actions as html for this club event as a string.
   */
  public String getActionsAsHtmlAsString () {
    if (hasActionsAsHtml()) {
      return getActionsAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actions as html for this club event is null.
 
    @return True if the actions as html for this club event is not null.
   */
  public boolean hasActionsAsHtml () {
    return (actionsAsHtml != null);
  }

  /**
    Determines if the actions as html for this club event
    is null or is empty.
 
    @return True if the actions as html for this club event
    is not null and not empty.
   */
  public boolean hasActionsAsHtmlWithData () {
    return (actionsAsHtml != null && actionsAsHtml.length() > 0);
  }

  /**
    Returns the actions as html for this club event.
 
    @return The actions as html for this club event.
   */
  public String getActionsAsHtml () {
    return actionsAsHtml;
  }
 
  /**
     Sets the why for this club event.
 
     @param  why The why for this club event.
   */
  public void setWhy (String why) {
    this.why = why;
    setModified (true);
  }

  /**
    Returns the why for this club event as a string.
 
    @return The why for this club event as a string.
   */
  public String getWhyAsString () {
    if (hasWhy()) {
      return getWhy().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the why for this club event is null.
 
    @return True if the why for this club event is not null.
   */
  public boolean hasWhy () {
    return (why != null);
  }

  /**
    Determines if the why for this club event
    is null or is empty.
 
    @return True if the why for this club event
    is not null and not empty.
   */
  public boolean hasWhyWithData () {
    return (why != null && why.length() > 0);
  }

  /**
    Returns the why for this club event.
 
    @return The why for this club event.
   */
  public String getWhy () {
    return why;
  }
 
  /**
     Sets the teaser for this club event.
 
     @param  teaser The teaser for this club event.
   */
  public void setTeaser (String teaser) {
    this.teaser = teaser;
    setModified (true);
  }

  /**
    Returns the teaser for this club event as a string.
 
    @return The teaser for this club event as a string.
   */
  public String getTeaserAsString () {
    if (hasTeaser()) {
      return getTeaser().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the teaser for this club event is null.
 
    @return True if the teaser for this club event is not null.
   */
  public boolean hasTeaser () {
    return (teaser != null);
  }

  /**
    Determines if the teaser for this club event
    is null or is empty.
 
    @return True if the teaser for this club event
    is not null and not empty.
   */
  public boolean hasTeaserWithData () {
    return (teaser != null && teaser.length() > 0);
  }

  /**
    Returns the teaser for this club event.
 
    @return The teaser for this club event.
   */
  public String getTeaser () {
    return teaser;
  }
 
  /**
     Sets the blurb for this club event.
 
     @param  blurb The blurb for this club event.
   */
  public void setBlurb (String blurb) {
    this.blurb = blurb;
    setModified (true);
  }

  /**
    Returns the blurb for this club event as a string.
 
    @return The blurb for this club event as a string.
   */
  public String getBlurbAsString () {
    if (hasBlurb()) {
      return getBlurb().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the blurb for this club event is null.
 
    @return True if the blurb for this club event is not null.
   */
  public boolean hasBlurb () {
    return (blurb != null);
  }

  /**
    Determines if the blurb for this club event
    is null or is empty.
 
    @return True if the blurb for this club event
    is not null and not empty.
   */
  public boolean hasBlurbWithData () {
    return (blurb != null && blurb.length() > 0);
  }

  /**
    Returns the blurb for this club event.
 
    @return The blurb for this club event.
   */
  public String getBlurb () {
    return blurb;
  }
 
  /**
     Sets the teaser as html for this club event.
 
     @param  teaserAsHtml The teaser as html for this club event.
   */
  public void setTeaserAsHtml (String teaserAsHtml) {
    this.teaserAsHtml = teaserAsHtml;
    setModified (true);
  }

  /**
    Returns the teaser as html for this club event as a string.
 
    @return The teaser as html for this club event as a string.
   */
  public String getTeaserAsHtmlAsString () {
    if (hasTeaserAsHtml()) {
      return getTeaserAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the teaser as html for this club event is null.
 
    @return True if the teaser as html for this club event is not null.
   */
  public boolean hasTeaserAsHtml () {
    return (teaserAsHtml != null);
  }

  /**
    Determines if the teaser as html for this club event
    is null or is empty.
 
    @return True if the teaser as html for this club event
    is not null and not empty.
   */
  public boolean hasTeaserAsHtmlWithData () {
    return (teaserAsHtml != null && teaserAsHtml.length() > 0);
  }

  /**
    Returns the teaser as html for this club event.
 
    @return The teaser as html for this club event.
   */
  public String getTeaserAsHtml () {
    return teaserAsHtml;
  }
 
  /**
     Sets the blurb as html for this club event.
 
     @param  blurbAsHtml The blurb as html for this club event.
   */
  public void setBlurbAsHtml (String blurbAsHtml) {
    this.blurbAsHtml = blurbAsHtml;
    setModified (true);
  }

  /**
    Returns the blurb as html for this club event as a string.
 
    @return The blurb as html for this club event as a string.
   */
  public String getBlurbAsHtmlAsString () {
    if (hasBlurbAsHtml()) {
      return getBlurbAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the blurb as html for this club event is null.
 
    @return True if the blurb as html for this club event is not null.
   */
  public boolean hasBlurbAsHtml () {
    return (blurbAsHtml != null);
  }

  /**
    Determines if the blurb as html for this club event
    is null or is empty.
 
    @return True if the blurb as html for this club event
    is not null and not empty.
   */
  public boolean hasBlurbAsHtmlWithData () {
    return (blurbAsHtml != null && blurbAsHtml.length() > 0);
  }

  /**
    Returns the blurb as html for this club event.
 
    @return The blurb as html for this club event.
   */
  public String getBlurbAsHtml () {
    return blurbAsHtml;
  }
 
  /**
     Sets the cost for this club event.
 
     @param  cost The cost for this club event.
   */
  public void setCost (String cost) {
    this.cost = cost;
    setModified (true);
  }

  /**
    Returns the cost for this club event as a string.
 
    @return The cost for this club event as a string.
   */
  public String getCostAsString () {
    if (hasCost()) {
      return getCost().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the cost for this club event is null.
 
    @return True if the cost for this club event is not null.
   */
  public boolean hasCost () {
    return (cost != null);
  }

  /**
    Determines if the cost for this club event
    is null or is empty.
 
    @return True if the cost for this club event
    is not null and not empty.
   */
  public boolean hasCostWithData () {
    return (cost != null && cost.length() > 0);
  }

  /**
    Returns the cost for this club event.
 
    @return The cost for this club event.
   */
  public String getCost () {
    return cost;
  }
 
  /**
     Sets the purchase for this club event.
 
     @param  purchase The purchase for this club event.
   */
  public void setPurchase (String purchase) {
    this.purchase = purchase;
    setModified (true);
  }

  /**
    Returns the purchase for this club event as a string.
 
    @return The purchase for this club event as a string.
   */
  public String getPurchaseAsString () {
    if (hasPurchase()) {
      return getPurchase().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the purchase for this club event is null.
 
    @return True if the purchase for this club event is not null.
   */
  public boolean hasPurchase () {
    return (purchase != null);
  }

  /**
    Determines if the purchase for this club event
    is null or is empty.
 
    @return True if the purchase for this club event
    is not null and not empty.
   */
  public boolean hasPurchaseWithData () {
    return (purchase != null && purchase.length() > 0);
  }

  /**
    Returns the purchase for this club event.
 
    @return The purchase for this club event.
   */
  public String getPurchase () {
    return purchase;
  }
 
  /**
     Sets the tickets for this club event.
 
     @param  tickets The tickets for this club event.
   */
  public void setTickets (String tickets) {
    this.tickets = tickets;
    setModified (true);
  }

  /**
    Returns the tickets for this club event as a string.
 
    @return The tickets for this club event as a string.
   */
  public String getTicketsAsString () {
    if (hasTickets()) {
      return getTickets().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the tickets for this club event is null.
 
    @return True if the tickets for this club event is not null.
   */
  public boolean hasTickets () {
    return (tickets != null);
  }

  /**
    Determines if the tickets for this club event
    is null or is empty.
 
    @return True if the tickets for this club event
    is not null and not empty.
   */
  public boolean hasTicketsWithData () {
    return (tickets != null && tickets.length() > 0);
  }

  /**
    Returns the tickets for this club event.
 
    @return The tickets for this club event.
   */
  public String getTickets () {
    return tickets;
  }
 
  /**
     Sets the quantity for this club event.
 
     @param  quantity The quantity for this club event.
   */
  public void setQuantity (String quantity) {
    this.quantity = quantity;
    setModified (true);
  }

  /**
    Returns the quantity for this club event as a string.
 
    @return The quantity for this club event as a string.
   */
  public String getQuantityAsString () {
    if (hasQuantity()) {
      return getQuantity().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the quantity for this club event is null.
 
    @return True if the quantity for this club event is not null.
   */
  public boolean hasQuantity () {
    return (quantity != null);
  }

  /**
    Determines if the quantity for this club event
    is null or is empty.
 
    @return True if the quantity for this club event
    is not null and not empty.
   */
  public boolean hasQuantityWithData () {
    return (quantity != null && quantity.length() > 0);
  }

  /**
    Returns the quantity for this club event.
 
    @return The quantity for this club event.
   */
  public String getQuantity () {
    return quantity;
  }
 
  /**
     Sets the planned income for this club event.
 
     @param  plannedIncome The planned income for this club event.
   */
  public void setPlannedIncome (String plannedIncome) {
    this.plannedIncome = plannedIncome;
    setModified (true);
  }

  /**
    Returns the planned income for this club event as a string.
 
    @return The planned income for this club event as a string.
   */
  public String getPlannedIncomeAsString () {
    if (hasPlannedIncome()) {
      return getPlannedIncome().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned income for this club event is null.
 
    @return True if the planned income for this club event is not null.
   */
  public boolean hasPlannedIncome () {
    return (plannedIncome != null);
  }

  /**
    Determines if the planned income for this club event
    is null or is empty.
 
    @return True if the planned income for this club event
    is not null and not empty.
   */
  public boolean hasPlannedIncomeWithData () {
    return (plannedIncome != null && plannedIncome.length() > 0);
  }

  /**
    Returns the planned income for this club event.
 
    @return The planned income for this club event.
   */
  public String getPlannedIncome () {
    return plannedIncome;
  }
  /**
    Returns the planned income as a BigDecimal object.
 
    @return The planned income for this club event as a BigDecimal.
   */
  public BigDecimal getPlannedIncomeAsBigDecimal () {
    CalcParser parser = new CalcParser(plannedIncome);
    return parser.getResult();
  }
 
  /**
     Sets the actual income for this club event.
 
     @param  actualIncome The actual income for this club event.
   */
  public void setActualIncome (String actualIncome) {
    this.actualIncome = actualIncome;
    setModified (true);
  }

  /**
    Returns the actual income for this club event as a string.
 
    @return The actual income for this club event as a string.
   */
  public String getActualIncomeAsString () {
    if (hasActualIncome()) {
      return getActualIncome().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual income for this club event is null.
 
    @return True if the actual income for this club event is not null.
   */
  public boolean hasActualIncome () {
    return (actualIncome != null);
  }

  /**
    Determines if the actual income for this club event
    is null or is empty.
 
    @return True if the actual income for this club event
    is not null and not empty.
   */
  public boolean hasActualIncomeWithData () {
    return (actualIncome != null && actualIncome.length() > 0);
  }

  /**
    Returns the actual income for this club event.
 
    @return The actual income for this club event.
   */
  public String getActualIncome () {
    return actualIncome;
  }
  /**
    Returns the actual income as a BigDecimal object.
 
    @return The actual income for this club event as a BigDecimal.
   */
  public BigDecimal getActualIncomeAsBigDecimal () {
    CalcParser parser = new CalcParser(actualIncome);
    return parser.getResult();
  }
 
  /**
     Sets the planned expense for this club event.
 
     @param  plannedExpense The planned expense for this club event.
   */
  public void setPlannedExpense (String plannedExpense) {
    this.plannedExpense = plannedExpense;
    setModified (true);
  }

  /**
    Returns the planned expense for this club event as a string.
 
    @return The planned expense for this club event as a string.
   */
  public String getPlannedExpenseAsString () {
    if (hasPlannedExpense()) {
      return getPlannedExpense().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned expense for this club event is null.
 
    @return True if the planned expense for this club event is not null.
   */
  public boolean hasPlannedExpense () {
    return (plannedExpense != null);
  }

  /**
    Determines if the planned expense for this club event
    is null or is empty.
 
    @return True if the planned expense for this club event
    is not null and not empty.
   */
  public boolean hasPlannedExpenseWithData () {
    return (plannedExpense != null && plannedExpense.length() > 0);
  }

  /**
    Returns the planned expense for this club event.
 
    @return The planned expense for this club event.
   */
  public String getPlannedExpense () {
    return plannedExpense;
  }
  /**
    Returns the planned expense as a BigDecimal object.
 
    @return The planned expense for this club event as a BigDecimal.
   */
  public BigDecimal getPlannedExpenseAsBigDecimal () {
    CalcParser parser = new CalcParser(plannedExpense);
    return parser.getResult();
  }
 
  /**
     Sets the actual expense for this club event.
 
     @param  actualExpense The actual expense for this club event.
   */
  public void setActualExpense (String actualExpense) {
    this.actualExpense = actualExpense;
    setModified (true);
  }

  /**
    Returns the actual expense for this club event as a string.
 
    @return The actual expense for this club event as a string.
   */
  public String getActualExpenseAsString () {
    if (hasActualExpense()) {
      return getActualExpense().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual expense for this club event is null.
 
    @return True if the actual expense for this club event is not null.
   */
  public boolean hasActualExpense () {
    return (actualExpense != null);
  }

  /**
    Determines if the actual expense for this club event
    is null or is empty.
 
    @return True if the actual expense for this club event
    is not null and not empty.
   */
  public boolean hasActualExpenseWithData () {
    return (actualExpense != null && actualExpense.length() > 0);
  }

  /**
    Returns the actual expense for this club event.
 
    @return The actual expense for this club event.
   */
  public String getActualExpense () {
    return actualExpense;
  }
  /**
    Returns the actual expense as a BigDecimal object.
 
    @return The actual expense for this club event as a BigDecimal.
   */
  public BigDecimal getActualExpenseAsBigDecimal () {
    CalcParser parser = new CalcParser(actualExpense);
    return parser.getResult();
  }
 
  /**
     Sets the planned attendance for this club event.
 
     @param  plannedAttendance The planned attendance for this club event.
   */
  public void setPlannedAttendance (String plannedAttendance) {
    this.plannedAttendance = plannedAttendance;
    setModified (true);
  }

  /**
    Returns the planned attendance for this club event as a string.
 
    @return The planned attendance for this club event as a string.
   */
  public String getPlannedAttendanceAsString () {
    if (hasPlannedAttendance()) {
      return getPlannedAttendance().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned attendance for this club event is null.
 
    @return True if the planned attendance for this club event is not null.
   */
  public boolean hasPlannedAttendance () {
    return (plannedAttendance != null);
  }

  /**
    Determines if the planned attendance for this club event
    is null or is empty.
 
    @return True if the planned attendance for this club event
    is not null and not empty.
   */
  public boolean hasPlannedAttendanceWithData () {
    return (plannedAttendance != null && plannedAttendance.length() > 0);
  }

  /**
    Returns the planned attendance for this club event.
 
    @return The planned attendance for this club event.
   */
  public String getPlannedAttendance () {
    return plannedAttendance;
  }
 
  /**
     Sets the actual attendance for this club event.
 
     @param  actualAttendance The actual attendance for this club event.
   */
  public void setActualAttendance (String actualAttendance) {
    this.actualAttendance = actualAttendance;
    setModified (true);
  }

  /**
    Returns the actual attendance for this club event as a string.
 
    @return The actual attendance for this club event as a string.
   */
  public String getActualAttendanceAsString () {
    if (hasActualAttendance()) {
      return getActualAttendance().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual attendance for this club event is null.
 
    @return True if the actual attendance for this club event is not null.
   */
  public boolean hasActualAttendance () {
    return (actualAttendance != null);
  }

  /**
    Determines if the actual attendance for this club event
    is null or is empty.
 
    @return True if the actual attendance for this club event
    is not null and not empty.
   */
  public boolean hasActualAttendanceWithData () {
    return (actualAttendance != null && actualAttendance.length() > 0);
  }

  /**
    Returns the actual attendance for this club event.
 
    @return The actual attendance for this club event.
   */
  public String getActualAttendance () {
    return actualAttendance;
  }
 
  /**
     Sets the over under for this club event.
 
     @param  overUnder The over under for this club event.
   */
  public void setOverUnder (String overUnder) {
    this.overUnder = overUnder;
    setModified (true);
  }

  /**
    Returns the over under for this club event as a string.
 
    @return The over under for this club event as a string.
   */
  public String getOverUnderAsString () {
    if (hasOverUnder()) {
      return getOverUnder().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the over under for this club event is null.
 
    @return True if the over under for this club event is not null.
   */
  public boolean hasOverUnder () {
    return (overUnder != null);
  }

  /**
    Determines if the over under for this club event
    is null or is empty.
 
    @return True if the over under for this club event
    is not null and not empty.
   */
  public boolean hasOverUnderWithData () {
    return (overUnder != null && overUnder.length() > 0);
  }

  /**
    Returns the over under for this club event.
 
    @return The over under for this club event.
   */
  public String getOverUnder () {
    return overUnder;
  }
  /**
    Returns the over under as a BigDecimal object.
 
    @return The over under for this club event as a BigDecimal.
   */
  public BigDecimal getOverUnderAsBigDecimal () {
    CalcParser parser = new CalcParser(overUnder);
    return parser.getResult();
  }
 
  /**
     Sets the finance projection for this club event.
 
     @param  financeProjection The finance projection for this club event.
   */
  public void setFinanceProjection (String financeProjection) {
    this.financeProjection = financeProjection;
    setModified (true);
  }

  /**
    Returns the finance projection for this club event as a string.
 
    @return The finance projection for this club event as a string.
   */
  public String getFinanceProjectionAsString () {
    if (hasFinanceProjection()) {
      return getFinanceProjection().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the finance projection for this club event is null.
 
    @return True if the finance projection for this club event is not null.
   */
  public boolean hasFinanceProjection () {
    return (financeProjection != null);
  }

  /**
    Determines if the finance projection for this club event
    is null or is empty.
 
    @return True if the finance projection for this club event
    is not null and not empty.
   */
  public boolean hasFinanceProjectionWithData () {
    return (financeProjection != null && financeProjection.length() > 0);
  }

  /**
    Returns the finance projection for this club event.
 
    @return The finance projection for this club event.
   */
  public String getFinanceProjection () {
    return financeProjection;
  }
  /**
    Returns the finance projection as a BigDecimal object.
 
    @return The finance projection for this club event as a BigDecimal.
   */
  public BigDecimal getFinanceProjectionAsBigDecimal () {
    CalcParser parser = new CalcParser(financeProjection);
    return parser.getResult();
  }
 
  /**
     Sets the prior yr pln inc for this club event.
 
     @param  priorYrPlnInc The prior yr pln inc for this club event.
   */
  public void setPriorYrPlnInc (String priorYrPlnInc) {
    this.priorYrPlnInc = priorYrPlnInc;
    setModified (true);
  }

  /**
    Returns the prior yr pln inc for this club event as a string.
 
    @return The prior yr pln inc for this club event as a string.
   */
  public String getPriorYrPlnIncAsString () {
    if (hasPriorYrPlnInc()) {
      return getPriorYrPlnInc().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the prior yr pln inc for this club event is null.
 
    @return True if the prior yr pln inc for this club event is not null.
   */
  public boolean hasPriorYrPlnInc () {
    return (priorYrPlnInc != null);
  }

  /**
    Determines if the prior yr pln inc for this club event
    is null or is empty.
 
    @return True if the prior yr pln inc for this club event
    is not null and not empty.
   */
  public boolean hasPriorYrPlnIncWithData () {
    return (priorYrPlnInc != null && priorYrPlnInc.length() > 0);
  }

  /**
    Returns the prior yr pln inc for this club event.
 
    @return The prior yr pln inc for this club event.
   */
  public String getPriorYrPlnInc () {
    return priorYrPlnInc;
  }
  /**
    Returns the prior yr pln inc as a BigDecimal object.
 
    @return The prior yr pln inc for this club event as a BigDecimal.
   */
  public BigDecimal getPriorYrPlnIncAsBigDecimal () {
    CalcParser parser = new CalcParser(priorYrPlnInc);
    return parser.getResult();
  }
 
  /**
     Sets the prior yr act inc for this club event.
 
     @param  priorYrActInc The prior yr act inc for this club event.
   */
  public void setPriorYrActInc (String priorYrActInc) {
    this.priorYrActInc = priorYrActInc;
    setModified (true);
  }

  /**
    Returns the prior yr act inc for this club event as a string.
 
    @return The prior yr act inc for this club event as a string.
   */
  public String getPriorYrActIncAsString () {
    if (hasPriorYrActInc()) {
      return getPriorYrActInc().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the prior yr act inc for this club event is null.
 
    @return True if the prior yr act inc for this club event is not null.
   */
  public boolean hasPriorYrActInc () {
    return (priorYrActInc != null);
  }

  /**
    Determines if the prior yr act inc for this club event
    is null or is empty.
 
    @return True if the prior yr act inc for this club event
    is not null and not empty.
   */
  public boolean hasPriorYrActIncWithData () {
    return (priorYrActInc != null && priorYrActInc.length() > 0);
  }

  /**
    Returns the prior yr act inc for this club event.
 
    @return The prior yr act inc for this club event.
   */
  public String getPriorYrActInc () {
    return priorYrActInc;
  }
  /**
    Returns the prior yr act inc as a BigDecimal object.
 
    @return The prior yr act inc for this club event as a BigDecimal.
   */
  public BigDecimal getPriorYrActIncAsBigDecimal () {
    CalcParser parser = new CalcParser(priorYrActInc);
    return parser.getResult();
  }
 
  /**
     Sets the prior yr pln exp for this club event.
 
     @param  priorYrPlnExp The prior yr pln exp for this club event.
   */
  public void setPriorYrPlnExp (String priorYrPlnExp) {
    this.priorYrPlnExp = priorYrPlnExp;
    setModified (true);
  }

  /**
    Returns the prior yr pln exp for this club event as a string.
 
    @return The prior yr pln exp for this club event as a string.
   */
  public String getPriorYrPlnExpAsString () {
    if (hasPriorYrPlnExp()) {
      return getPriorYrPlnExp().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the prior yr pln exp for this club event is null.
 
    @return True if the prior yr pln exp for this club event is not null.
   */
  public boolean hasPriorYrPlnExp () {
    return (priorYrPlnExp != null);
  }

  /**
    Determines if the prior yr pln exp for this club event
    is null or is empty.
 
    @return True if the prior yr pln exp for this club event
    is not null and not empty.
   */
  public boolean hasPriorYrPlnExpWithData () {
    return (priorYrPlnExp != null && priorYrPlnExp.length() > 0);
  }

  /**
    Returns the prior yr pln exp for this club event.
 
    @return The prior yr pln exp for this club event.
   */
  public String getPriorYrPlnExp () {
    return priorYrPlnExp;
  }
  /**
    Returns the prior yr pln exp as a BigDecimal object.
 
    @return The prior yr pln exp for this club event as a BigDecimal.
   */
  public BigDecimal getPriorYrPlnExpAsBigDecimal () {
    CalcParser parser = new CalcParser(priorYrPlnExp);
    return parser.getResult();
  }
 
  /**
     Sets the prior yr act exp for this club event.
 
     @param  priorYrActExp The prior yr act exp for this club event.
   */
  public void setPriorYrActExp (String priorYrActExp) {
    this.priorYrActExp = priorYrActExp;
    setModified (true);
  }

  /**
    Returns the prior yr act exp for this club event as a string.
 
    @return The prior yr act exp for this club event as a string.
   */
  public String getPriorYrActExpAsString () {
    if (hasPriorYrActExp()) {
      return getPriorYrActExp().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the prior yr act exp for this club event is null.
 
    @return True if the prior yr act exp for this club event is not null.
   */
  public boolean hasPriorYrActExp () {
    return (priorYrActExp != null);
  }

  /**
    Determines if the prior yr act exp for this club event
    is null or is empty.
 
    @return True if the prior yr act exp for this club event
    is not null and not empty.
   */
  public boolean hasPriorYrActExpWithData () {
    return (priorYrActExp != null && priorYrActExp.length() > 0);
  }

  /**
    Returns the prior yr act exp for this club event.
 
    @return The prior yr act exp for this club event.
   */
  public String getPriorYrActExp () {
    return priorYrActExp;
  }
  /**
    Returns the prior yr act exp as a BigDecimal object.
 
    @return The prior yr act exp for this club event as a BigDecimal.
   */
  public BigDecimal getPriorYrActExpAsBigDecimal () {
    CalcParser parser = new CalcParser(priorYrActExp);
    return parser.getResult();
  }
 
  /**
     Sets the recap for this club event.
 
     @param  recap The recap for this club event.
   */
  public void setRecap (String recap) {
    this.recap = recap;
    setModified (true);
  }

  /**
    Returns the recap for this club event as a string.
 
    @return The recap for this club event as a string.
   */
  public String getRecapAsString () {
    if (hasRecap()) {
      return getRecap().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the recap for this club event is null.
 
    @return True if the recap for this club event is not null.
   */
  public boolean hasRecap () {
    return (recap != null);
  }

  /**
    Determines if the recap for this club event
    is null or is empty.
 
    @return True if the recap for this club event
    is not null and not empty.
   */
  public boolean hasRecapWithData () {
    return (recap != null && recap.length() > 0);
  }

  /**
    Returns the recap for this club event.
 
    @return The recap for this club event.
   */
  public String getRecap () {
    return recap;
  }
 
  /**
     Sets the recap as html for this club event.
 
     @param  recapAsHtml The recap as html for this club event.
   */
  public void setRecapAsHtml (String recapAsHtml) {
    this.recapAsHtml = recapAsHtml;
    setModified (true);
  }

  /**
    Returns the recap as html for this club event as a string.
 
    @return The recap as html for this club event as a string.
   */
  public String getRecapAsHtmlAsString () {
    if (hasRecapAsHtml()) {
      return getRecapAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the recap as html for this club event is null.
 
    @return True if the recap as html for this club event is not null.
   */
  public boolean hasRecapAsHtml () {
    return (recapAsHtml != null);
  }

  /**
    Determines if the recap as html for this club event
    is null or is empty.
 
    @return True if the recap as html for this club event
    is not null and not empty.
   */
  public boolean hasRecapAsHtmlWithData () {
    return (recapAsHtml != null && recapAsHtml.length() > 0);
  }

  /**
    Returns the recap as html for this club event.
 
    @return The recap as html for this club event.
   */
  public String getRecapAsHtml () {
    return recapAsHtml;
  }
 
  /**
     Sets the id for this club event.
 
     @param  id The id for this club event.
   */
  public void setId (String id) {
    this.id = id;
    setModified (true);
  }

  /**
    Returns the id for this club event as a string.
 
    @return The id for this club event as a string.
   */
  public String getIdAsString () {
    if (hasId()) {
      return getId().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the id for this club event is null.
 
    @return True if the id for this club event is not null.
   */
  public boolean hasId () {
    return (id != null);
  }

  /**
    Determines if the id for this club event
    is null or is empty.
 
    @return True if the id for this club event
    is not null and not empty.
   */
  public boolean hasIdWithData () {
    return (id != null && id.length() > 0);
  }

  /**
    Returns the id for this club event.
 
    @return The id for this club event.
   */
  public String getId () {
    return id;
  }
 
  /**
     Sets the link for this club event.
 
     @param  link The link for this club event.
   */
  public void setLink (String link) {
    this.link = link;
    setModified (true);
  }

  /**
    Returns the link for this club event as a string.
 
    @return The link for this club event as a string.
   */
  public String getLinkAsString () {
    if (hasLink()) {
      return getLink().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the link for this club event is null.
 
    @return True if the link for this club event is not null.
   */
  public boolean hasLink () {
    return (link != null);
  }

  /**
    Determines if the link for this club event
    is null or is empty.
 
    @return True if the link for this club event
    is not null and not empty.
   */
  public boolean hasLinkWithData () {
    return (link != null && link.length() > 0);
  }

  /**
    Returns the link for this club event.
 
    @return The link for this club event.
   */
  public String getLink () {
    return link;
  }
 
  /**
     Sets the venue for this club event.
 
     @param  venue The venue for this club event.
   */
  public void setVenue (String venue) {
    this.venue = venue;
    setModified (true);
  }

  /**
    Returns the venue for this club event as a string.
 
    @return The venue for this club event as a string.
   */
  public String getVenueAsString () {
    if (hasVenue()) {
      return getVenue().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the venue for this club event is null.
 
    @return True if the venue for this club event is not null.
   */
  public boolean hasVenue () {
    return (venue != null);
  }

  /**
    Determines if the venue for this club event
    is null or is empty.
 
    @return True if the venue for this club event
    is not null and not empty.
   */
  public boolean hasVenueWithData () {
    return (venue != null && venue.length() > 0);
  }

  /**
    Returns the venue for this club event.
 
    @return The venue for this club event.
   */
  public String getVenue () {
    return venue;
  }
 
  /**
     Sets the image for this club event.
 
     @param  image The image for this club event.
   */
  public void setImage (String image) {
    this.image = image;
    setModified (true);
  }

  /**
    Returns the image for this club event as a string.
 
    @return The image for this club event as a string.
   */
  public String getImageAsString () {
    if (hasImage()) {
      return getImage().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the image for this club event is null.
 
    @return True if the image for this club event is not null.
   */
  public boolean hasImage () {
    return (image != null);
  }

  /**
    Determines if the image for this club event
    is null or is empty.
 
    @return True if the image for this club event
    is not null and not empty.
   */
  public boolean hasImageWithData () {
    return (image != null && image.length() > 0);
  }

  /**
    Returns the image for this club event.
 
    @return The image for this club event.
   */
  public String getImage () {
    return image;
  }
 
  /**
     Sets the news image for this club event.
 
     @param  newsImage The news image for this club event.
   */
  public void setNewsImage (String newsImage) {
    this.newsImage = newsImage;
    setModified (true);
  }

  /**
    Returns the news image for this club event as a string.
 
    @return The news image for this club event as a string.
   */
  public String getNewsImageAsString () {
    if (hasNewsImage()) {
      return getNewsImage().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the news image for this club event is null.
 
    @return True if the news image for this club event is not null.
   */
  public boolean hasNewsImage () {
    return (newsImage != null);
  }

  /**
    Determines if the news image for this club event
    is null or is empty.
 
    @return True if the news image for this club event
    is not null and not empty.
   */
  public boolean hasNewsImageWithData () {
    return (newsImage != null && newsImage.length() > 0);
  }

  /**
    Returns the news image for this club event.
 
    @return The news image for this club event.
   */
  public String getNewsImage () {
    return newsImage;
  }
 
  /**
     Sets the call to action for this club event.
 
     @param  callToAction The call to action for this club event.
   */
  public void setCallToAction (String callToAction) {
    this.callToAction = callToAction;
    setModified (true);
  }

  /**
    Returns the call to action for this club event as a string.
 
    @return The call to action for this club event as a string.
   */
  public String getCallToActionAsString () {
    if (hasCallToAction()) {
      return getCallToAction().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the call to action for this club event is null.
 
    @return True if the call to action for this club event is not null.
   */
  public boolean hasCallToAction () {
    return (callToAction != null);
  }

  /**
    Determines if the call to action for this club event
    is null or is empty.
 
    @return True if the call to action for this club event
    is not null and not empty.
   */
  public boolean hasCallToActionWithData () {
    return (callToAction != null && callToAction.length() > 0);
  }

  /**
    Returns the call to action for this club event.
 
    @return The call to action for this club event.
   */
  public String getCallToAction () {
    return callToAction;
  }
 
  /**
     Sets the cta link for this club event.
 
     @param  ctaLink The cta link for this club event.
   */
  public void setCtaLink (String ctaLink) {
    this.ctaLink = ctaLink;
    setModified (true);
  }

  /**
    Returns the cta link for this club event as a string.
 
    @return The cta link for this club event as a string.
   */
  public String getCtaLinkAsString () {
    if (hasCtaLink()) {
      return getCtaLink().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the cta link for this club event is null.
 
    @return True if the cta link for this club event is not null.
   */
  public boolean hasCtaLink () {
    return (ctaLink != null);
  }

  /**
    Determines if the cta link for this club event
    is null or is empty.
 
    @return True if the cta link for this club event
    is not null and not empty.
   */
  public boolean hasCtaLinkWithData () {
    return (ctaLink != null && ctaLink.length() > 0);
  }

  /**
    Returns the cta link for this club event.
 
    @return The cta link for this club event.
   */
  public String getCtaLink () {
    return ctaLink;
  }
 
  /**
     Sets the layout for this club event.
 
     @param  layout The layout for this club event.
   */
  public void setLayout (String layout) {
    this.layout = layout;
    setModified (true);
  }

  /**
    Returns the layout for this club event as a string.
 
    @return The layout for this club event as a string.
   */
  public String getLayoutAsString () {
    if (hasLayout()) {
      return getLayout().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the layout for this club event is null.
 
    @return True if the layout for this club event is not null.
   */
  public boolean hasLayout () {
    return (layout != null);
  }

  /**
    Determines if the layout for this club event
    is null or is empty.
 
    @return True if the layout for this club event
    is not null and not empty.
   */
  public boolean hasLayoutWithData () {
    return (layout != null && layout.length() > 0);
  }

  /**
    Returns the layout for this club event.
 
    @return The layout for this club event.
   */
  public String getLayout () {
    return layout;
  }
 
  /**
     Sets the short date for this club event.
 
     @param  shortDate The short date for this club event.
   */
  public void setShortDate (String shortDate) {
    this.shortDate = shortDate;
    setModified (true);
  }

  /**
    Returns the short date for this club event as a string.
 
    @return The short date for this club event as a string.
   */
  public String getShortDateAsString () {
    if (hasShortDate()) {
      return getShortDate().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the short date for this club event is null.
 
    @return True if the short date for this club event is not null.
   */
  public boolean hasShortDate () {
    return (shortDate != null);
  }

  /**
    Determines if the short date for this club event
    is null or is empty.
 
    @return True if the short date for this club event
    is not null and not empty.
   */
  public boolean hasShortDateWithData () {
    return (shortDate != null && shortDate.length() > 0);
  }

  /**
    Returns the short date for this club event.
 
    @return The short date for this club event.
   */
  public String getShortDate () {
    return shortDate;
  }
 
  /**
     Sets the notes for this club event.
 
     @param  notes The notes for this club event.
   */
  public void setNotes (String notes) {
    this.notes = notes;
    setModified (true);
  }

  /**
    Returns the notes for this club event as a string.
 
    @return The notes for this club event as a string.
   */
  public String getNotesAsString () {
    if (hasNotes()) {
      return getNotes().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the notes for this club event is null.
 
    @return True if the notes for this club event is not null.
   */
  public boolean hasNotes () {
    return (notes != null);
  }

  /**
    Determines if the notes for this club event
    is null or is empty.
 
    @return True if the notes for this club event
    is not null and not empty.
   */
  public boolean hasNotesWithData () {
    return (notes != null && notes.length() > 0);
  }

  /**
    Returns the notes for this club event.
 
    @return The notes for this club event.
   */
  public String getNotes () {
    return notes;
  }
 
  /**
     Sets the notes as html for this club event.
 
     @param  notesAsHtml The notes as html for this club event.
   */
  public void setNotesAsHtml (String notesAsHtml) {
    this.notesAsHtml = notesAsHtml;
    setModified (true);
  }

  /**
    Returns the notes as html for this club event as a string.
 
    @return The notes as html for this club event as a string.
   */
  public String getNotesAsHtmlAsString () {
    if (hasNotesAsHtml()) {
      return getNotesAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the notes as html for this club event is null.
 
    @return True if the notes as html for this club event is not null.
   */
  public boolean hasNotesAsHtml () {
    return (notesAsHtml != null);
  }

  /**
    Determines if the notes as html for this club event
    is null or is empty.
 
    @return True if the notes as html for this club event
    is not null and not empty.
   */
  public boolean hasNotesAsHtmlWithData () {
    return (notesAsHtml != null && notesAsHtml.length() > 0);
  }

  /**
    Returns the notes as html for this club event.
 
    @return The notes as html for this club event.
   */
  public String getNotesAsHtml () {
    return notesAsHtml;
  }

  /**
   Return the number of columns.
   */
  public static int getColumnCount() {
    return COLUMN_COUNT;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  taggable-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
   Does this class have a Tags field?
 
   @return True if so, false if not.
   */
  public static boolean isClassTagged() {
    return true;
  }
 
  /**
   Return the tags assigned to this taggable item.
 
   @return The tags assigned.
   */
  public Tags getTags () {
    return flags;
  }
 
  /**
   Flatten all the tags for this item, separating each level/word into its own
   first-level tag.
   */
  public void flattenTags() {
    flags.flatten();
  }

  /**
   Convert the tags to all lower-case letters.
   */
  public void lowerCaseTags () {
    flags.makeLowerCase();
  }
 
  /**
   Set the first TagsNode occurrence for this Taggable item. This is stored
   in a TagsModel occurrence.

   @param tagsNode The tags node to be stored.
   */
  public void setTagsNode (TreeItem<TagsNodeValue> tagsNode) {
    this.tagsNode = tagsNode;
  }

  /**
   Return the first TagsNode occurrence for this Taggable item. These nodes
   are stored in a TagsModel occurrence.

   @return The tags node stored.
   */
  public TreeItem<TagsNodeValue> getTagsNode (){
    return tagsNode;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  master-detail-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
   Allocate a new array list.
  */
  public void newEventActionList () {
    eventActionList = new ArrayList();
  }
 
  /**
   Adds a new EventAction to the end of the internal detail list.
 
   @param eventAction The EventAction to be added.
 
   @return True if the list was modified.
  */
  public boolean addEventAction (EventAction eventAction) {
    return eventActionList.add(eventAction);
  }
 
  /**
   Adds a new EventAction at the specified location.
 
   @param index The index position at which the EventAction should be added.
 
   @param eventAction The EventAction to be added.
  */
  public void addEventAction (int index, EventAction eventAction) {
    eventActionList.add(index, eventAction);
  }
 
  /**
   Gets the EventAction at the specified location.
 
   @param index The desired location.
 
   @return The EventAction stored at that location.
  */
  public EventAction getEventAction (int index) {
    return eventActionList.get(index);
  }
 
  /**
   Sets a new EventAction at the specified list location.
 
   @param index The index location in the internal table.
 
   @param eventAction The new EventAction to be placed there.
 
   @return The EventAction previously stored at that location.
  */
  public EventAction setEventAction (int index, EventAction eventAction) {
    return eventActionList.set(index, eventAction);
  }
 
  /**
   Returns the size of the internal EventAction list.
 
   @return The size of the internal list of details.
  */
  public int sizeEventActionList () {
    return eventActionList.size();
  }

  /**
   Allocate a new array list.
  */
  public void newEventNoteList () {
    eventNoteList = new ArrayList();
  }
 
  /**
   Adds a new EventNote to the end of the internal detail list.
 
   @param eventNote The EventNote to be added.
 
   @return True if the list was modified.
  */
  public boolean addEventNote (EventNote eventNote) {
    return eventNoteList.add(eventNote);
  }
 
  /**
   Adds a new EventNote at the specified location.
 
   @param index The index position at which the EventNote should be added.
 
   @param eventNote The EventNote to be added.
  */
  public void addEventNote (int index, EventNote eventNote) {
    eventNoteList.add(index, eventNote);
  }
 
  /**
   Gets the EventNote at the specified location.
 
   @param index The desired location.
 
   @return The EventNote stored at that location.
  */
  public EventNote getEventNote (int index) {
    return eventNoteList.get(index);
  }
 
  /**
   Sets a new EventNote at the specified list location.
 
   @param index The index location in the internal table.
 
   @param eventNote The new EventNote to be placed there.
 
   @return The EventNote previously stored at that location.
  */
  public EventNote setEventNote (int index, EventNote eventNote) {
    return eventNoteList.set(index, eventNote);
  }
 
  /**
   Returns the size of the internal EventNote list.
 
   @return The size of the internal list of details.
  */
  public int sizeEventNoteList () {
    return eventNoteList.size();
  }

  /**
   Allocate a new array list.
  */
  public void newEventTransactionList () {
    eventTransactionList = new ArrayList();
  }
 
  /**
   Adds a new EventTransaction to the end of the internal detail list.
 
   @param eventTransaction The EventTransaction to be added.
 
   @return True if the list was modified.
  */
  public boolean addEventTransaction (EventTransaction eventTransaction) {
    return eventTransactionList.add(eventTransaction);
  }
 
  /**
   Adds a new EventTransaction at the specified location.
 
   @param index The index position at which the EventTransaction should be added.
 
   @param eventTransaction The EventTransaction to be added.
  */
  public void addEventTransaction (int index, EventTransaction eventTransaction) {
    eventTransactionList.add(index, eventTransaction);
  }
 
  /**
   Gets the EventTransaction at the specified location.
 
   @param index The desired location.
 
   @return The EventTransaction stored at that location.
  */
  public EventTransaction getEventTransaction (int index) {
    return eventTransactionList.get(index);
  }
 
  /**
   Sets a new EventTransaction at the specified list location.
 
   @param index The index location in the internal table.
 
   @param eventTransaction The new EventTransaction to be placed there.
 
   @return The EventTransaction previously stored at that location.
  */
  public EventTransaction setEventTransaction (int index, EventTransaction eventTransaction) {
    return eventTransactionList.set(index, eventTransaction);
  }
 
  /**
   Returns the size of the internal EventTransaction list.
 
   @return The size of the internal list of details.
  */
  public int sizeEventTransactionList () {
    return eventTransactionList.size();
  }

}
